{
  "address": "0x7d2d4c048bc7eA147C9681FA24b170e2b6a5B470",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_stakedToken",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "_rewardToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_startBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_endBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_lockUpDuration",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_withdrawFee",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_feeAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenRecovered",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "AdminTokenRecovery",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Claim",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "EmergencyWithdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "endBlock",
          "type": "uint256"
        }
      ],
      "name": "NewEndBlock",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lockUpDuration",
          "type": "uint256"
        }
      ],
      "name": "NewLockUpDuration",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rewardPerBlock",
          "type": "uint256"
        }
      ],
      "name": "NewRewardPerBlock",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "startBlock",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "endBlock",
          "type": "uint256"
        }
      ],
      "name": "NewStartAndEndBlocks",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        }
      ],
      "name": "RewardsStop",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "PRECISION_FACTOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "accTokenPerShare",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "depositRewardFunds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "emergencyWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "endBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastUpdateBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lockUpDuration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "pendingReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolCalcRewardPerBlock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_durationBlocks",
          "type": "uint256"
        }
      ],
      "name": "poolSetDuration",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_startBlock",
          "type": "uint256"
        }
      ],
      "name": "poolSetStart",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_startBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_durationBlocks",
          "type": "uint256"
        }
      ],
      "name": "poolSetStartAndDuration",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_blocks",
          "type": "uint256"
        }
      ],
      "name": "poolStartIn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "recoverWrongTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardDuration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardPerBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardPerBlockUI",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardTokenDecimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_lockUpDuration",
          "type": "uint256"
        }
      ],
      "name": "setLockUpDuration",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakedToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stopReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_rewardPerBlock",
          "type": "uint256"
        }
      ],
      "name": "updateRewardPerBlock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_startBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_bonusEndBlock",
          "type": "uint256"
        }
      ],
      "name": "updateStartAndEndBlocks",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rewardDebt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "firstDeposit",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "withdrawRemains",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x34737de52ad045ec7ebd2e6612a5fff51963212384801351255d9d96369e8de2",
  "receipt": {
    "to": null,
    "from": "0xB6Af19068482ec5feb4c4ef7f81a4dFdFa0BbAD2",
    "contractAddress": "0x7d2d4c048bc7eA147C9681FA24b170e2b6a5B470",
    "transactionIndex": 129,
    "gasUsed": "3405933",
    "logsBloom": "0x
    "blockHash": "0x5744145eb7a237d7a2c619f67da77557570240391b1bd5e0d76f416a27948440",
    "transactionHash": "0x34737de52ad045ec7ebd2e6612a5fff51963212384801351255d9d96369e8de2",
    "logs": [
      {
        "transactionIndex": 129,
        "blockNumber": 15678995,
        "transactionHash": "0x34737de52ad045ec7ebd2e6612a5fff51963212384801351255d9d96369e8de2",
        "address": "0x7d2d4c048bc7eA147C9681FA24b170e2b6a5B470",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000b6af19068482ec5feb4c4ef7f81a4dfdfa0bbad2"
        ],
        "data": "0x",
        "logIndex": 402,
        "blockHash": "0x5744145eb7a237d7a2c619f67da77557570240391b1bd5e0d76f416a27948440"
      }
    ],
    "blockNumber": 15678995,
    "cumulativeGasUsed": "21621254",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xF700D4c708C2be1463E355F337603183D20E0808",
    "0x07958Be5D12365db62a6535D0a88105944a2E81E",
    15740550,
    18278000,
    7776000,
    500,
    "0xaAF6B6f4c3a20cae39A25fBcD9617822cd8bf1C7"
  ],
  "numDeployments": 1,
  "solcInputHash": "fd6dbda324bbba4f9bac1ba4e4e6d350",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_stakedToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lockUpDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_withdrawFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_feeAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenRecovered\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AdminTokenRecovery\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endBlock\",\"type\":\"uint256\"}],\"name\":\"NewEndBlock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockUpDuration\",\"type\":\"uint256\"}],\"name\":\"NewLockUpDuration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardPerBlock\",\"type\":\"uint256\"}],\"name\":\"NewRewardPerBlock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endBlock\",\"type\":\"uint256\"}],\"name\":\"NewStartAndEndBlocks\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"RewardsStop\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"PRECISION_FACTOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accTokenPerShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"depositRewardFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUpdateBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockUpDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolCalcRewardPerBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_durationBlocks\",\"type\":\"uint256\"}],\"name\":\"poolSetDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startBlock\",\"type\":\"uint256\"}],\"name\":\"poolSetStart\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_durationBlocks\",\"type\":\"uint256\"}],\"name\":\"poolSetStartAndDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_blocks\",\"type\":\"uint256\"}],\"name\":\"poolStartIn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"recoverWrongTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerBlockUI\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardTokenDecimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lockUpDuration\",\"type\":\"uint256\"}],\"name\":\"setLockUpDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakedToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stopReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardPerBlock\",\"type\":\"uint256\"}],\"name\":\"updateRewardPerBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bonusEndBlock\",\"type\":\"uint256\"}],\"name\":\"updateStartAndEndBlocks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"firstDeposit\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"withdrawRemains\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"recoverWrongTokens(address,uint256)\":{\"details\":\"This function is only callable by admin.\",\"params\":{\"_tokenAddress\":\": the address of the token to withdraw\",\"_tokenAmount\":\": the number of tokens to withdraw\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateStartAndEndBlocks(uint256,uint256)\":{\"details\":\"This function is only callable by owner.\",\"params\":{\"_bonusEndBlock\":\": the new end block\",\"_startBlock\":\": the new start block\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"recoverWrongTokens(address,uint256)\":{\"notice\":\"It allows the admin to recover wrong tokens sent to the contract\"},\"updateStartAndEndBlocks(uint256,uint256)\":{\"notice\":\"It allows the admin to update start and end blocks\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/GQGalacticReserve.sol\":\"GQGalacticReserve\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xd1d8caaeb45f78e0b0715664d56c220c283c89bf8b8c02954af86404d6b367f8\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa2f576be637946f767aa56601c26d717f48a0aff44f82e46f13807eea1009a21\",\"license\":\"MIT\"},\"contracts/GQGalacticReserve.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\ncontract GQGalacticReserve is Ownable, ReentrancyGuard {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    // Accrued token per share\\n    uint256 public accTokenPerShare;\\n\\n    // The block number when REWARD distribution ends.\\n    uint256 public endBlock;\\n\\n    // The block number when REWARD distribution starts.\\n    uint256 public startBlock;\\n\\n    // The block number of the last pool update\\n    uint256 public lastUpdateBlock;\\n\\n    // REWARD tokens created per block.\\n    uint256 public rewardPerBlock;\\n\\n    // Lockup duration for deposit\\n    uint256 public lockUpDuration;\\n\\n    // Withdraw fee in BP\\n    uint256 public withdrawFee;\\n\\n    // The precision factor\\n    uint256 public PRECISION_FACTOR;\\n\\n    // decimals places of the reward token\\n    uint8 public rewardTokenDecimals;\\n\\n    // Withdraw fee destiny address\\n    address public feeAddress;\\n\\n    // The reward token\\n    IERC20 public rewardToken;\\n\\n    // The staked token\\n    IERC20 public stakedToken;\\n\\n    // Info of each user that stakes tokens (stakedToken)\\n    mapping(address => UserInfo) public userInfo;\\n\\n    struct UserInfo {\\n        uint256 amount; // Staked tokens the user has provided\\n        uint256 rewardDebt; // Reward debt\\n        uint256 firstDeposit; // First deposit before withdraw\\n    }\\n\\n    event AdminTokenRecovery(address tokenRecovered, uint256 amount);\\n    event Deposit(address indexed user, uint256 amount);\\n    event Claim(address indexed user, uint256 amount);\\n    event EmergencyWithdraw(address indexed user, uint256 amount);\\n    event NewStartAndEndBlocks(uint256 startBlock, uint256 endBlock);\\n    event NewEndBlock(uint256 endBlock);\\n    event NewRewardPerBlock(uint256 rewardPerBlock);\\n    event RewardsStop(uint256 blockNumber);\\n    event Withdraw(address indexed user, uint256 amount);\\n    event NewLockUpDuration(uint256 lockUpDuration);\\n\\n    /*\\n     * @notice Constructor of the contract\\n     * @param _stakedToken: staked token address\\n     * @param _rewardToken: reward token address\\n     * @param _rewardPerBlock: reward per block (in rewardToken)\\n     * @param _startBlock: start block\\n     * @param _endBlock: end block\\n     * @param _lockUpDuration: duration for the deposit\\n     * @param _withdrawFee: fee for early withdraw\\n     * @param _feeAddress: address where fees for early withdraw will be send\\n     */\\n    constructor(\\n        IERC20 _stakedToken,\\n        IERC20 _rewardToken,\\n        uint256 _startBlock,\\n        uint256 _endBlock,\\n        uint256 _lockUpDuration,\\n        uint256 _withdrawFee,\\n        address _feeAddress\\n    ) {\\n        stakedToken = _stakedToken;\\n        rewardToken = _rewardToken;\\n        startBlock = _startBlock;\\n        endBlock = _endBlock;\\n        lockUpDuration = _lockUpDuration;\\n        withdrawFee = _withdrawFee;\\n        feeAddress = _feeAddress;\\n\\n        rewardTokenDecimals = IERC20Metadata(address(rewardToken)).decimals();\\n        uint256 decimalsRewardToken = uint256(rewardTokenDecimals);\\n        require(decimalsRewardToken < 30, \\\"Must be inferior to 30\\\");\\n\\n        PRECISION_FACTOR = uint256(10**(uint256(30).sub(decimalsRewardToken)));\\n\\n        // Set the lastRewardBlock as the startBlock\\n        lastUpdateBlock = startBlock;\\n    }\\n\\n    /*\\n     * @notice Deposit staked tokens and collect reward tokens (if any)\\n     * @param _amount: amount to deposit (in stakedToken)\\n     */\\n    function deposit(uint256 _amount) external nonReentrant {\\n        UserInfo storage user = userInfo[msg.sender];\\n\\n        _updatePool();\\n\\n        if (user.amount > 0) {\\n            uint256 pending = user\\n                .amount\\n                .mul(accTokenPerShare)\\n                .div(PRECISION_FACTOR)\\n                .sub(user.rewardDebt);\\n            if (pending > 0) {\\n                _safeTokenTransfer(msg.sender, pending);\\n            }\\n        }\\n\\n        if (_amount > 0) {\\n            user.amount = user.amount.add(_amount);\\n            stakedToken.safeTransferFrom(\\n                address(msg.sender),\\n                address(this),\\n                _amount\\n            );\\n            user.firstDeposit = user.firstDeposit == 0\\n                ? block.timestamp\\n                : user.firstDeposit;\\n        }\\n\\n        user.rewardDebt = user.amount.mul(accTokenPerShare).div(\\n            PRECISION_FACTOR\\n        );\\n\\n        emit Deposit(msg.sender, _amount);\\n    }\\n\\n    /*\\n     * @notice Withdraw staked tokens and collect reward tokens\\n     * @param _amount: amount to withdraw (in rewardToken)\\n     */\\n    function withdraw(uint256 _amount) external nonReentrant {\\n        require(_amount > 0, \\\"Error: Invalid amount\\\");\\n        UserInfo storage user = userInfo[msg.sender];\\n        require(user.amount >= _amount, \\\"Amount to withdraw too high\\\");\\n        _updatePool();\\n\\n        uint256 pending = user\\n            .amount\\n            .mul(accTokenPerShare)\\n            .div(PRECISION_FACTOR)\\n            .sub(user.rewardDebt);\\n\\n        user.amount = user.amount.sub(_amount);\\n        uint256 _amountToSend = _amount;\\n        if (block.timestamp < (user.firstDeposit + lockUpDuration)) {\\n            uint256 _feeAmountToSend = _amountToSend.mul(withdrawFee).div(\\n                10000\\n            );\\n            stakedToken.safeTransfer(address(feeAddress), _feeAmountToSend);\\n            _amountToSend = _amountToSend - _feeAmountToSend;\\n        }\\n        stakedToken.safeTransfer(address(msg.sender), _amountToSend);\\n        user.firstDeposit = user.firstDeposit == 0\\n            ? block.timestamp\\n            : user.firstDeposit;\\n\\n        if (pending > 0) {\\n            _safeTokenTransfer(msg.sender, pending);\\n        }\\n\\n        user.rewardDebt = user.amount.mul(accTokenPerShare).div(\\n            PRECISION_FACTOR\\n        );\\n\\n        emit Withdraw(msg.sender, _amount);\\n    }\\n\\n    /*\\n     * @notice Claim reward tokens\\n     */\\n    function claim() external nonReentrant {\\n        UserInfo storage user = userInfo[msg.sender];\\n\\n        _updatePool();\\n\\n        if (user.amount > 0) {\\n            uint256 pending = user\\n                .amount\\n                .mul(accTokenPerShare)\\n                .div(PRECISION_FACTOR)\\n                .sub(user.rewardDebt);\\n\\n            if (pending > 0) {\\n                _safeTokenTransfer(msg.sender, pending);\\n                emit Claim(msg.sender, pending);\\n            }\\n        }\\n\\n        user.rewardDebt = user.amount.mul(accTokenPerShare).div(\\n            PRECISION_FACTOR\\n        );\\n    }\\n\\n    /*\\n     * @notice Withdraw staked tokens without caring about rewards\\n     * @dev Needs to be for emergency.\\n     */\\n    function emergencyWithdraw() external nonReentrant {\\n        UserInfo storage user = userInfo[msg.sender];\\n        uint256 _amountToTransfer = user.amount;\\n        user.amount = 0;\\n        user.rewardDebt = 0;\\n\\n        // Avoid users send an amount with 0 tokens\\n        if (_amountToTransfer > 0) {\\n            if (block.timestamp < (user.firstDeposit + lockUpDuration)) {\\n                uint256 _feeAmountToSend = _amountToTransfer\\n                    .mul(withdrawFee)\\n                    .div(10000);\\n                stakedToken.safeTransfer(address(feeAddress), _feeAmountToSend);\\n                _amountToTransfer = _amountToTransfer - _feeAmountToSend;\\n            }\\n            stakedToken.safeTransfer(address(msg.sender), _amountToTransfer);\\n        }\\n\\n        emit EmergencyWithdraw(msg.sender, _amountToTransfer);\\n    }\\n\\n    /**\\n     * @notice It allows the admin to recover wrong tokens sent to the contract\\n     * @param _tokenAddress: the address of the token to withdraw\\n     * @param _tokenAmount: the number of tokens to withdraw\\n     * @dev This function is only callable by admin.\\n     */\\n    function recoverWrongTokens(address _tokenAddress, uint256 _tokenAmount)\\n        external\\n        onlyOwner\\n    {\\n        require(\\n            _tokenAddress != address(stakedToken),\\n            \\\"Cannot be staked token\\\"\\n        );\\n        require(\\n            _tokenAddress != address(rewardToken),\\n            \\\"Cannot be reward token\\\"\\n        );\\n\\n        IERC20(_tokenAddress).safeTransfer(address(msg.sender), _tokenAmount);\\n\\n        emit AdminTokenRecovery(_tokenAddress, _tokenAmount);\\n    }\\n\\n    /*\\n     * @notice Stop rewards\\n     * @dev Only callable by owner\\n     */\\n    function stopReward() external onlyOwner {\\n        endBlock = block.number;\\n    }\\n\\n    /*\\n     * @notice Update reward per block\\n     * @dev Only callable by owner.\\n     * @param _rewardPerBlock: the reward per block\\n     */\\n    function updateRewardPerBlock(uint256 _rewardPerBlock) external onlyOwner {\\n        require(block.number < startBlock, \\\"Pool has started\\\");\\n        rewardPerBlock = _rewardPerBlock;\\n        emit NewRewardPerBlock(_rewardPerBlock);\\n    }\\n\\n    /**\\n     * @notice It allows the admin to update start and end blocks\\n     * @dev This function is only callable by owner.\\n     * @param _startBlock: the new start block\\n     * @param _bonusEndBlock: the new end block\\n     */\\n    function updateStartAndEndBlocks(\\n        uint256 _startBlock,\\n        uint256 _bonusEndBlock\\n    ) external onlyOwner {\\n        require(block.number < startBlock, \\\"Pool has started\\\");\\n        require(\\n            _startBlock < _bonusEndBlock,\\n            \\\"New startBlock must be lower than new endBlock\\\"\\n        );\\n        require(\\n            block.number < _startBlock,\\n            \\\"New startBlock must be higher than current block\\\"\\n        );\\n\\n        startBlock = _startBlock;\\n        endBlock = _bonusEndBlock;\\n\\n        // Set the lastRewardBlock as the startBlock\\n        lastUpdateBlock = startBlock;\\n\\n        emit NewStartAndEndBlocks(_startBlock, _bonusEndBlock);\\n    }\\n\\n    /*\\n     * @notice Sets the lock up duration\\n     * @param _lockUpDuration: The lock up duration in seconds (block timestamp)\\n     * @dev This function is only callable by owner.\\n     */\\n    function setLockUpDuration(uint256 _lockUpDuration) external onlyOwner {\\n        lockUpDuration = _lockUpDuration;\\n        emit NewLockUpDuration(lockUpDuration);\\n    }\\n\\n    /*\\n     * @notice Sets start block of the pool given a block amount\\n     * @param _blocks: block amount\\n     * @dev This function is only callable by owner.\\n     */\\n    function poolStartIn(uint256 _blocks) external onlyOwner {\\n        poolSetStart(block.number.add(_blocks));\\n    }\\n\\n    /*\\n     * @notice Set the duration and start block of the pool\\n     * @param _startBlock: start block\\n     * @param _durationBlocks: duration block amount\\n     * @dev This function is only callable by owner.\\n     */\\n    function poolSetStartAndDuration(\\n        uint256 _startBlock,\\n        uint256 _durationBlocks\\n    ) external onlyOwner {\\n        poolSetStart(_startBlock);\\n        poolSetDuration(_durationBlocks);\\n    }\\n\\n    /*\\n     * @notice Withdraws the remaining funds\\n     * @param _to The address where the funds will be sent\\n     */\\n    function withdrawRemains(address _to) external onlyOwner {\\n        require(block.number > endBlock, \\\"Error: Pool not finished yet\\\");\\n        uint256 tokenBal = rewardToken.balanceOf(address(this));\\n        require(tokenBal > 0, \\\"Error: No remaining funds\\\");\\n        IERC20(rewardToken).safeTransfer(_to, tokenBal);\\n    }\\n\\n    /*\\n     * @notice Withdraws the remaining funds\\n     * @param _to The address where the funds will be sent\\n     */\\n    function depositRewardFunds(uint256 _amount) external onlyOwner {\\n        IERC20(rewardToken).safeTransfer(address(this), _amount);\\n    }\\n\\n    /*\\n     * @notice Gets the reward per block for UI\\n     * @return reward per block\\n     */\\n    function rewardPerBlockUI() external view returns (uint256) {\\n        return rewardPerBlock.div(10**uint256(rewardTokenDecimals));\\n    }\\n\\n    /*\\n     * @notice View function to see pending reward on frontend.\\n     * @param _user: user address\\n     * @return Pending reward for a given user\\n     */\\n    function pendingReward(address _user) external view returns (uint256) {\\n        UserInfo storage user = userInfo[_user];\\n        uint256 stakedTokenSupply = stakedToken.balanceOf(address(this));\\n        if (block.number > lastUpdateBlock && stakedTokenSupply != 0) {\\n            uint256 multiplier = _getMultiplier(lastUpdateBlock, block.number);\\n            uint256 tokenReward = multiplier.mul(rewardPerBlock);\\n            uint256 adjustedTokenPerShare = accTokenPerShare.add(\\n                tokenReward.mul(PRECISION_FACTOR).div(stakedTokenSupply)\\n            );\\n            return\\n                user\\n                    .amount\\n                    .mul(adjustedTokenPerShare)\\n                    .div(PRECISION_FACTOR)\\n                    .sub(user.rewardDebt);\\n        } else {\\n            return\\n                user.amount.mul(accTokenPerShare).div(PRECISION_FACTOR).sub(\\n                    user.rewardDebt\\n                );\\n        }\\n    }\\n\\n    /*\\n     * @notice Sets start block of the pool\\n     * @param _startBlock: start block\\n     * @dev This function is only callable by owner.\\n     */\\n    function poolSetStart(uint256 _startBlock) public onlyOwner {\\n        require(block.number < startBlock, \\\"Pool has started\\\");\\n        uint256 rewardDurationValue = rewardDuration();\\n        startBlock = _startBlock;\\n        endBlock = startBlock.add(rewardDurationValue);\\n        lastUpdateBlock = startBlock;\\n        emit NewStartAndEndBlocks(startBlock, endBlock);\\n    }\\n\\n    /*\\n     * @notice Set the duration of the pool\\n     * @param _durationBlocks: duration block amount\\n     * @dev This function is only callable by owner.\\n     */\\n    function poolSetDuration(uint256 _durationBlocks) public onlyOwner {\\n        require(block.number < startBlock, \\\"Pool has started\\\");\\n        endBlock = startBlock.add(_durationBlocks);\\n        poolCalcRewardPerBlock();\\n        emit NewEndBlock(endBlock);\\n    }\\n\\n    /*\\n     * @notice Calculates the rewardPerBlock of the pool\\n     * @dev This function is only callable by owner.\\n     */\\n    function poolCalcRewardPerBlock() public onlyOwner {\\n        uint256 rewardBal = rewardToken.balanceOf(address(this));\\n        rewardPerBlock = rewardBal.div(rewardDuration());\\n    }\\n\\n    /*\\n     * @notice Gets the reward duration\\n     * @return reward duration\\n     */\\n    function rewardDuration() public view returns (uint256) {\\n        return endBlock.sub(startBlock);\\n    }\\n\\n    /*\\n     * @notice SendPending tokens to claimer\\n     * @param pending: amount to claim\\n     */\\n    function _safeTokenTransfer(address _to, uint256 _amount) internal {\\n        uint256 rewardTokenBalance = rewardToken.balanceOf(address(this));\\n        if (_amount > rewardTokenBalance) {\\n            rewardToken.safeTransfer(_to, rewardTokenBalance);\\n        } else {\\n            rewardToken.safeTransfer(_to, _amount);\\n        }\\n    }\\n\\n    /*\\n     * @notice Update reward variables of the given pool to be up-to-date.\\n     */\\n    function _updatePool() internal {\\n        if (block.number <= lastUpdateBlock) {\\n            return;\\n        }\\n\\n        uint256 stakedTokenSupply = stakedToken.balanceOf(address(this));\\n\\n        if (stakedTokenSupply == 0) {\\n            lastUpdateBlock = block.number;\\n            return;\\n        }\\n\\n        uint256 multiplier = _getMultiplier(lastUpdateBlock, block.number);\\n        uint256 tokenReward = multiplier.mul(rewardPerBlock);\\n        accTokenPerShare = accTokenPerShare.add(\\n            tokenReward.mul(PRECISION_FACTOR).div(stakedTokenSupply)\\n        );\\n        lastUpdateBlock = block.number;\\n    }\\n\\n    /*\\n     * @notice Return reward multiplier over the given _from to _to block.\\n     * @param _from: block to start\\n     * @param _to: block to finish\\n     * @return multiplier\\n     */\\n    function _getMultiplier(uint256 _from, uint256 _to)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        if (_to <= endBlock) {\\n            return _to.sub(_from);\\n        } else if (_from >= endBlock) {\\n            return 0;\\n        } else {\\n            return endBlock.sub(_from);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x74f45b22c628bab1bfa0dc9cbad62acb87cc45cc6fccbac2ec3d62f932519b4c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040516200402a3803806200402a8339818101604052810190620000379190620003de565b620000576200004b6200029e60201b60201c565b620002a660201b60201c565b6001808190555086600c60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555085600b60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508460048190555083600381905550826007819055508160088190555080600a60016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015620001a657600080fd5b505afa158015620001bb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001e191906200048b565b600a60006101000a81548160ff021916908360ff1602179055506000600a60009054906101000a900460ff1660ff169050601e811062000258576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200024f90620004de565b60405180910390fd5b6200027381601e6200036a60201b620021871790919060201c565b600a6200028191906200056c565b600981905550600454600581905550505050505050505062000810565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600081836200037a9190620006a9565b905092915050565b6000815190506200039381620007a8565b92915050565b600081519050620003aa81620007c2565b92915050565b600081519050620003c181620007dc565b92915050565b600081519050620003d881620007f6565b92915050565b600080600080600080600060e0888a031215620003fa57600080fd5b60006200040a8a828b0162000399565b97505060206200041d8a828b0162000399565b9650506040620004308a828b01620003b0565b9550506060620004438a828b01620003b0565b9450506080620004568a828b01620003b0565b93505060a0620004698a828b01620003b0565b92505060c06200047c8a828b0162000382565b91505092959891949750929550565b6000602082840312156200049e57600080fd5b6000620004ae84828501620003c7565b91505092915050565b6000620004c660168362000500565b9150620004d3826200077f565b602082019050919050565b60006020820190508181036000830152620004f981620004b7565b9050919050565b600082825260208201905092915050565b6000808291508390505b600185111562000563578086048111156200053b576200053a62000743565b5b60018516156200054b5780820291505b80810290506200055b8562000772565b94506200051b565b94509492505050565b600062000579826200072c565b915062000586836200072c565b9250620005b57fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8484620005bd565b905092915050565b600082620005cf5760019050620006a2565b81620005df5760009050620006a2565b8160018114620005f85760028114620006035762000639565b6001915050620006a2565b60ff84111562000618576200061762000743565b5b8360020a91508482111562000632576200063162000743565b5b50620006a2565b5060208310610133831016604e8410600b8410161715620006735782820a9050838111156200066d576200066c62000743565b5b620006a2565b62000682848484600162000511565b925090508184048111156200069c576200069b62000743565b5b81810290505b9392505050565b6000620006b6826200072c565b9150620006c3836200072c565b925082821015620006d957620006d862000743565b5b828203905092915050565b6000620006f1826200070c565b9050919050565b60006200070582620006e4565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008160011c9050919050565b7f4d75737420626520696e666572696f7220746f20333000000000000000000000600082015250565b620007b381620006e4565b8114620007bf57600080fd5b50565b620007cd81620006f8565b8114620007d957600080fd5b50565b620007e7816200072c565b8114620007f357600080fd5b50565b620008018162000736565b81146200080d57600080fd5b50565b61380a80620008206000396000f3fe608060405234801561001057600080fd5b50600436106102115760003560e01c80638f66291511610125578063d3a8615c116100ad578063ea9041e41161007c578063ea9041e414610534578063f2fde38b14610550578063f40f0f521461056c578063f520e7e51461059c578063f7c618c1146105ba57610211565b8063d3a8615c146104d4578063db2e21bc146104f0578063e1b2addc146104fa578063e941fa781461051657610211565b8063a2ba0bc7116100f4578063a2ba0bc714610456578063b3f02d3814610460578063b6b55f251461047c578063cc7a262e14610498578063ccd34cd5146104b657610211565b80638f662915146103e05780639513997f146103fe5780639bdcecd11461041a578063a218141b1461043857610211565b80634e71d92d116101a8578063715018a611610177578063715018a6146103745780637bfaa40c1461037e57806380dc06721461039a5780638ae39cac146103a45780638da5cb5b146103c257610211565b80634e71d92d14610312578063576e093b1461031c5780635bb06ead146103385780636aa662b51461035657610211565b80632e1a7d4d116101e45780632e1a7d4d1461029e5780633f138d4b146102ba57806341275358146102d657806348cd4cb1146102f457610211565b806301f8a97614610216578063083c63231461023257806310f8097b146102505780631959a0021461026c575b600080fd5b610230600480360381019061022b9190612a04565b6105d8565b005b61023a6106d9565b6040516102479190612ff4565b60405180910390f35b61026a60048036038101906102659190612a04565b6106df565b005b61028660048036038101906102819190612976565b610779565b60405161029593929190613038565b60405180910390f35b6102b860048036038101906102b39190612a04565b6107a3565b005b6102d460048036038101906102cf919061299f565b610b07565b005b6102de610d0d565b6040516102eb9190612d5c565b60405180910390f35b6102fc610d33565b6040516103099190612ff4565b60405180910390f35b61031a610d39565b005b61033660048036038101906103319190612976565b610ec9565b005b6103406110cc565b60405161034d9190612ff4565b60405180910390f35b61035e611106565b60405161036b9190612ff4565b60405180910390f35b61037c61110c565b005b61039860048036038101906103939190612a04565b611194565b005b6103a26112b3565b005b6103ac611338565b6040516103b99190612ff4565b60405180910390f35b6103ca61133e565b6040516103d79190612d5c565b60405180910390f35b6103e8611367565b6040516103f59190612ff4565b60405180910390f35b61041860048036038101906104139190612a56565b61136d565b005b610422611505565b60405161042f919061306f565b60405180910390f35b610440611518565b60405161044d9190612ff4565b60405180910390f35b61045e61151e565b005b61047a60048036038101906104759190612a04565b61166c565b005b61049660048036038101906104919190612a04565b6117a4565b005b6104a06119cd565b6040516104ad9190612dd7565b60405180910390f35b6104be6119f3565b6040516104cb9190612ff4565b60405180910390f35b6104ee60048036038101906104e99190612a56565b6119f9565b005b6104f8611a8b565b005b610514600480360381019061050f9190612a04565b611cae565b005b61051e611d6d565b60405161052b9190612ff4565b60405180910390f35b61054e60048036038101906105499190612a04565b611d73565b005b61056a60048036038101906105659190612976565b611e3f565b005b61058660048036038101906105819190612976565b611f37565b6040516105939190612ff4565b60405180910390f35b6105a4612143565b6040516105b19190612ff4565b60405180910390f35b6105c2612161565b6040516105cf9190612dd7565b60405180910390f35b6105e061219d565b73ffffffffffffffffffffffffffffffffffffffff166105fe61133e565b73ffffffffffffffffffffffffffffffffffffffff1614610654576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161064b90612f14565b60405180910390fd5b6004544310610698576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161068f90612e54565b60405180910390fd5b806006819055507f0c4d677eef92893ac7ec52faf8140fc6c851ab4736302b4f3a89dfb20696a0df816040516106ce9190612ff4565b60405180910390a150565b60035481565b6106e761219d565b73ffffffffffffffffffffffffffffffffffffffff1661070561133e565b73ffffffffffffffffffffffffffffffffffffffff161461075b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161075290612f14565b60405180910390fd5b61077661077182436121a590919063ffffffff16565b61166c565b50565b600d6020528060005260406000206000915090508060000154908060010154908060020154905083565b600260015414156107e9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107e090612fd4565b60405180910390fd5b600260018190555060008111610834576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161082b90612ed4565b60405180910390fd5b6000600d60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905081816000015410156108be576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108b590612f54565b60405180910390fd5b6108c66121bb565b600061090b82600101546108fd6009546108ef600254876000015461230590919063ffffffff16565b61231b90919063ffffffff16565b61218790919063ffffffff16565b905061092483836000015461218790919063ffffffff16565b82600001819055506000839050600754836002015461094391906130bc565b4210156109f65760006109756127106109676008548561230590919063ffffffff16565b61231b90919063ffffffff16565b90506109e6600a60019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1682600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166123319092919063ffffffff16565b80826109f2919061330e565b9150505b610a433382600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166123319092919063ffffffff16565b6000836002015414610a59578260020154610a5b565b425b83600201819055506000821115610a7757610a7633836123b7565b5b610aa4600954610a96600254866000015461230590919063ffffffff16565b61231b90919063ffffffff16565b83600101819055503373ffffffffffffffffffffffffffffffffffffffff167f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a942436485604051610af29190612ff4565b60405180910390a25050506001808190555050565b610b0f61219d565b73ffffffffffffffffffffffffffffffffffffffff16610b2d61133e565b73ffffffffffffffffffffffffffffffffffffffff1614610b83576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b7a90612f14565b60405180910390fd5b600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610c14576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c0b90612f94565b60405180910390fd5b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610ca5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c9c90612f34565b60405180910390fd5b610cd033828473ffffffffffffffffffffffffffffffffffffffff166123319092919063ffffffff16565b7f74545154aac348a3eac92596bd1971957ca94795f4e954ec5f613b55fab781298282604051610d01929190612dae565b60405180910390a15050565b600a60019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60045481565b60026001541415610d7f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d7690612fd4565b60405180910390fd5b60026001819055506000600d60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050610dd26121bb565b600081600001541115610e8a576000610e248260010154610e16600954610e08600254876000015461230590919063ffffffff16565b61231b90919063ffffffff16565b61218790919063ffffffff16565b90506000811115610e8857610e3933826123b7565b3373ffffffffffffffffffffffffffffffffffffffff167f47cee97cb7acd717b3c0aa1435d004cd5b3c8c57d70dbceb4e4458bbd60e39d482604051610e7f9190612ff4565b60405180910390a25b505b610eb7600954610ea9600254846000015461230590919063ffffffff16565b61231b90919063ffffffff16565b81600101819055505060018081905550565b610ed161219d565b73ffffffffffffffffffffffffffffffffffffffff16610eef61133e565b73ffffffffffffffffffffffffffffffffffffffff1614610f45576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f3c90612f14565b60405180910390fd5b6003544311610f89576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f8090612e34565b60405180910390fd5b6000600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610fe69190612d5c565b60206040518083038186803b158015610ffe57600080fd5b505afa158015611012573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110369190612a2d565b90506000811161107b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161107290612eb4565b60405180910390fd5b6110c88282600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166123319092919063ffffffff16565b5050565b6000611101600a60009054906101000a900460ff1660ff16600a6110f09190613196565b60065461231b90919063ffffffff16565b905090565b60075481565b61111461219d565b73ffffffffffffffffffffffffffffffffffffffff1661113261133e565b73ffffffffffffffffffffffffffffffffffffffff1614611188576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161117f90612f14565b60405180910390fd5b6111926000612513565b565b61119c61219d565b73ffffffffffffffffffffffffffffffffffffffff166111ba61133e565b73ffffffffffffffffffffffffffffffffffffffff1614611210576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161120790612f14565b60405180910390fd5b6004544310611254576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161124b90612e54565b60405180910390fd5b611269816004546121a590919063ffffffff16565b60038190555061127761151e565b7f55baa248360bce74a89304071ca6e882f61d2226c15dde53a4ec1e05af523d926003546040516112a89190612ff4565b60405180910390a150565b6112bb61219d565b73ffffffffffffffffffffffffffffffffffffffff166112d961133e565b73ffffffffffffffffffffffffffffffffffffffff161461132f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161132690612f14565b60405180910390fd5b43600381905550565b60065481565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60025481565b61137561219d565b73ffffffffffffffffffffffffffffffffffffffff1661139361133e565b73ffffffffffffffffffffffffffffffffffffffff16146113e9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113e090612f14565b60405180910390fd5b600454431061142d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161142490612e54565b60405180910390fd5b80821061146f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161146690612e74565b60405180910390fd5b8143106114b1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114a890612ef4565b60405180910390fd5b81600481905550806003819055506004546005819055507f7cd0ab87d19036f3dfadadb232c78aa4879dda3f0c994a9d637532410ee2ce0682826040516114f992919061300f565b60405180910390a15050565b600a60009054906101000a900460ff1681565b60055481565b61152661219d565b73ffffffffffffffffffffffffffffffffffffffff1661154461133e565b73ffffffffffffffffffffffffffffffffffffffff161461159a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161159190612f14565b60405180910390fd5b6000600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016115f79190612d5c565b60206040518083038186803b15801561160f57600080fd5b505afa158015611623573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116479190612a2d565b9050611663611654612143565b8261231b90919063ffffffff16565b60068190555050565b61167461219d565b73ffffffffffffffffffffffffffffffffffffffff1661169261133e565b73ffffffffffffffffffffffffffffffffffffffff16146116e8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116df90612f14565b60405180910390fd5b600454431061172c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161172390612e54565b60405180910390fd5b6000611736612143565b905081600481905550611754816004546121a590919063ffffffff16565b6003819055506004546005819055507f7cd0ab87d19036f3dfadadb232c78aa4879dda3f0c994a9d637532410ee2ce0660045460035460405161179892919061300f565b60405180910390a15050565b600260015414156117ea576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117e190612fd4565b60405180910390fd5b60026001819055506000600d60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905061183d6121bb565b6000816000015411156118a757600061188f8260010154611881600954611873600254876000015461230590919063ffffffff16565b61231b90919063ffffffff16565b61218790919063ffffffff16565b905060008111156118a5576118a433826123b7565b5b505b600082111561193f576118c78282600001546121a590919063ffffffff16565b816000018190555061191e333084600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166125d7909392919063ffffffff16565b6000816002015414611934578060020154611936565b425b81600201819055505b61196c60095461195e600254846000015461230590919063ffffffff16565b61231b90919063ffffffff16565b81600101819055503373ffffffffffffffffffffffffffffffffffffffff167fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c836040516119ba9190612ff4565b60405180910390a2506001808190555050565b600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60095481565b611a0161219d565b73ffffffffffffffffffffffffffffffffffffffff16611a1f61133e565b73ffffffffffffffffffffffffffffffffffffffff1614611a75576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a6c90612f14565b60405180910390fd5b611a7e8261166c565b611a8781611194565b5050565b60026001541415611ad1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ac890612fd4565b60405180910390fd5b60026001819055506000600d60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905060008160000154905060008260000181905550600082600101819055506000811115611c55576007548260020154611b5491906130bc565b421015611c07576000611b86612710611b786008548561230590919063ffffffff16565b61231b90919063ffffffff16565b9050611bf7600a60019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1682600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166123319092919063ffffffff16565b8082611c03919061330e565b9150505b611c543382600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166123319092919063ffffffff16565b5b3373ffffffffffffffffffffffffffffffffffffffff167f5fafa99d0643513820be26656b45130b01e1c03062e1266bf36f88cbd3bd969582604051611c9b9190612ff4565b60405180910390a2505060018081905550565b611cb661219d565b73ffffffffffffffffffffffffffffffffffffffff16611cd461133e565b73ffffffffffffffffffffffffffffffffffffffff1614611d2a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d2190612f14565b60405180910390fd5b806007819055507fd2a4f919593bfa0565c404bb5e42080750d07eedb9dfa9907c22be9e29c02a98600754604051611d629190612ff4565b60405180910390a150565b60085481565b611d7b61219d565b73ffffffffffffffffffffffffffffffffffffffff16611d9961133e565b73ffffffffffffffffffffffffffffffffffffffff1614611def576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611de690612f14565b60405180910390fd5b611e3c3082600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166123319092919063ffffffff16565b50565b611e4761219d565b73ffffffffffffffffffffffffffffffffffffffff16611e6561133e565b73ffffffffffffffffffffffffffffffffffffffff1614611ebb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611eb290612f14565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611f2b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f2290612e14565b60405180910390fd5b611f3481612513565b50565b600080600d60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506000600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401611fd89190612d5c565b60206040518083038186803b158015611ff057600080fd5b505afa158015612004573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120289190612a2d565b90506005544311801561203c575060008114155b156120f657600061204f60055443612660565b905060006120686006548361230590919063ffffffff16565b905060006120a7612096856120886009548661230590919063ffffffff16565b61231b90919063ffffffff16565b6002546121a590919063ffffffff16565b90506120ea85600101546120dc6009546120ce858a6000015461230590919063ffffffff16565b61231b90919063ffffffff16565b61218790919063ffffffff16565b9550505050505061213e565b612139826001015461212b60095461211d600254876000015461230590919063ffffffff16565b61231b90919063ffffffff16565b61218790919063ffffffff16565b925050505b919050565b600061215c60045460035461218790919063ffffffff16565b905090565b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008183612195919061330e565b905092915050565b600033905090565b600081836121b391906130bc565b905092915050565b60055443116121c957612303565b6000600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016122269190612d5c565b60206040518083038186803b15801561223e57600080fd5b505afa158015612252573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122769190612a2d565b9050600081141561228e574360058190555050612303565b600061229c60055443612660565b905060006122b56006548361230590919063ffffffff16565b90506122f26122e1846122d36009548561230590919063ffffffff16565b61231b90919063ffffffff16565b6002546121a590919063ffffffff16565b600281905550436005819055505050505b565b6000818361231391906132b4565b905092915050565b600081836123299190613112565b905092915050565b6123b28363a9059cbb60e01b8484604051602401612350929190612dae565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506126b5565b505050565b6000600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016124149190612d5c565b60206040518083038186803b15801561242c57600080fd5b505afa158015612440573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124649190612a2d565b9050808211156124c0576124bb8382600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166123319092919063ffffffff16565b61250e565b61250d8383600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166123319092919063ffffffff16565b5b505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b61265a846323b872dd60e01b8585856040516024016125f893929190612d77565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506126b5565b50505050565b600060035482116126855761267e838361218790919063ffffffff16565b90506126af565b600354831061269757600090506126af565b6126ac8360035461218790919063ffffffff16565b90505b92915050565b6000612717826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff1661277c9092919063ffffffff16565b9050600081511115612777578080602001905181019061273791906129db565b612776576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161276d90612fb4565b60405180910390fd5b5b505050565b606061278b8484600085612794565b90509392505050565b6060824710156127d9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016127d090612e94565b60405180910390fd5b6127e2856128a8565b612821576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161281890612f74565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff16858760405161284a9190612d45565b60006040518083038185875af1925050503d8060008114612887576040519150601f19603f3d011682016040523d82523d6000602084013e61288c565b606091505b509150915061289c8282866128bb565b92505050949350505050565b600080823b905060008111915050919050565b606083156128cb5782905061291b565b6000835111156128de5782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016129129190612df2565b60405180910390fd5b9392505050565b6000813590506129318161378f565b92915050565b600081519050612946816137a6565b92915050565b60008135905061295b816137bd565b92915050565b600081519050612970816137bd565b92915050565b60006020828403121561298857600080fd5b600061299684828501612922565b91505092915050565b600080604083850312156129b257600080fd5b60006129c085828601612922565b92505060206129d18582860161294c565b9150509250929050565b6000602082840312156129ed57600080fd5b60006129fb84828501612937565b91505092915050565b600060208284031215612a1657600080fd5b6000612a248482850161294c565b91505092915050565b600060208284031215612a3f57600080fd5b6000612a4d84828501612961565b91505092915050565b60008060408385031215612a6957600080fd5b6000612a778582860161294c565b9250506020612a888582860161294c565b9150509250929050565b612a9b81613342565b82525050565b6000612aac8261308a565b612ab681856130a0565b9350612ac68185602086016133bb565b80840191505092915050565b612adb81613397565b82525050565b6000612aec82613095565b612af681856130ab565b9350612b068185602086016133bb565b612b0f8161344c565b840191505092915050565b6000612b276026836130ab565b9150612b328261346a565b604082019050919050565b6000612b4a601c836130ab565b9150612b55826134b9565b602082019050919050565b6000612b6d6010836130ab565b9150612b78826134e2565b602082019050919050565b6000612b90602e836130ab565b9150612b9b8261350b565b604082019050919050565b6000612bb36026836130ab565b9150612bbe8261355a565b604082019050919050565b6000612bd66019836130ab565b9150612be1826135a9565b602082019050919050565b6000612bf96015836130ab565b9150612c04826135d2565b602082019050919050565b6000612c1c6030836130ab565b9150612c27826135fb565b604082019050919050565b6000612c3f6020836130ab565b9150612c4a8261364a565b602082019050919050565b6000612c626016836130ab565b9150612c6d82613673565b602082019050919050565b6000612c85601b836130ab565b9150612c908261369c565b602082019050919050565b6000612ca8601d836130ab565b9150612cb3826136c5565b602082019050919050565b6000612ccb6016836130ab565b9150612cd6826136ee565b602082019050919050565b6000612cee602a836130ab565b9150612cf982613717565b604082019050919050565b6000612d11601f836130ab565b9150612d1c82613766565b602082019050919050565b612d3081613380565b82525050565b612d3f8161338a565b82525050565b6000612d518284612aa1565b915081905092915050565b6000602082019050612d716000830184612a92565b92915050565b6000606082019050612d8c6000830186612a92565b612d996020830185612a92565b612da66040830184612d27565b949350505050565b6000604082019050612dc36000830185612a92565b612dd06020830184612d27565b9392505050565b6000602082019050612dec6000830184612ad2565b92915050565b60006020820190508181036000830152612e0c8184612ae1565b905092915050565b60006020820190508181036000830152612e2d81612b1a565b9050919050565b60006020820190508181036000830152612e4d81612b3d565b9050919050565b60006020820190508181036000830152612e6d81612b60565b9050919050565b60006020820190508181036000830152612e8d81612b83565b9050919050565b60006020820190508181036000830152612ead81612ba6565b9050919050565b60006020820190508181036000830152612ecd81612bc9565b9050919050565b60006020820190508181036000830152612eed81612bec565b9050919050565b60006020820190508181036000830152612f0d81612c0f565b9050919050565b60006020820190508181036000830152612f2d81612c32565b9050919050565b60006020820190508181036000830152612f4d81612c55565b9050919050565b60006020820190508181036000830152612f6d81612c78565b9050919050565b60006020820190508181036000830152612f8d81612c9b565b9050919050565b60006020820190508181036000830152612fad81612cbe565b9050919050565b60006020820190508181036000830152612fcd81612ce1565b9050919050565b60006020820190508181036000830152612fed81612d04565b9050919050565b60006020820190506130096000830184612d27565b92915050565b60006040820190506130246000830185612d27565b6130316020830184612d27565b9392505050565b600060608201905061304d6000830186612d27565b61305a6020830185612d27565b6130676040830184612d27565b949350505050565b60006020820190506130846000830184612d36565b92915050565b600081519050919050565b600081519050919050565b600081905092915050565b600082825260208201905092915050565b60006130c782613380565b91506130d283613380565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115613107576131066133ee565b5b828201905092915050565b600061311d82613380565b915061312883613380565b9250826131385761313761341d565b5b828204905092915050565b6000808291508390505b600185111561318d57808604811115613169576131686133ee565b5b60018516156131785780820291505b80810290506131868561345d565b945061314d565b94509492505050565b60006131a182613380565b91506131ac83613380565b92506131d97fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff84846131e1565b905092915050565b6000826131f157600190506132ad565b816131ff57600090506132ad565b8160018114613215576002811461321f5761324e565b60019150506132ad565b60ff841115613231576132306133ee565b5b8360020a915084821115613248576132476133ee565b5b506132ad565b5060208310610133831016604e8410600b84101617156132835782820a90508381111561327e5761327d6133ee565b5b6132ad565b6132908484846001613143565b925090508184048111156132a7576132a66133ee565b5b81810290505b9392505050565b60006132bf82613380565b91506132ca83613380565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615613303576133026133ee565b5b828202905092915050565b600061331982613380565b915061332483613380565b925082821015613337576133366133ee565b5b828203905092915050565b600061334d82613360565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b60006133a2826133a9565b9050919050565b60006133b482613360565b9050919050565b60005b838110156133d95780820151818401526020810190506133be565b838111156133e8576000848401525b50505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000601f19601f8301169050919050565b60008160011c9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f4572726f723a20506f6f6c206e6f742066696e69736865642079657400000000600082015250565b7f506f6f6c20686173207374617274656400000000000000000000000000000000600082015250565b7f4e6577207374617274426c6f636b206d757374206265206c6f7765722074686160008201527f6e206e657720656e64426c6f636b000000000000000000000000000000000000602082015250565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b7f4572726f723a204e6f2072656d61696e696e672066756e647300000000000000600082015250565b7f4572726f723a20496e76616c696420616d6f756e740000000000000000000000600082015250565b7f4e6577207374617274426c6f636b206d7573742062652068696768657220746860008201527f616e2063757272656e7420626c6f636b00000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f43616e6e6f742062652072657761726420746f6b656e00000000000000000000600082015250565b7f416d6f756e7420746f20776974686472617720746f6f20686967680000000000600082015250565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b7f43616e6e6f74206265207374616b656420746f6b656e00000000000000000000600082015250565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b61379881613342565b81146137a357600080fd5b50565b6137af81613354565b81146137ba57600080fd5b50565b6137c681613380565b81146137d157600080fd5b5056fea264697066735822122042192a0e32122d741f14d97d1b823e815cdee239bbda43e268be33268207282f64736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102115760003560e01c80638f66291511610125578063d3a8615c116100ad578063ea9041e41161007c578063ea9041e414610534578063f2fde38b14610550578063f40f0f521461056c578063f520e7e51461059c578063f7c618c1146105ba57610211565b8063d3a8615c146104d4578063db2e21bc146104f0578063e1b2addc146104fa578063e941fa781461051657610211565b8063a2ba0bc7116100f4578063a2ba0bc714610456578063b3f02d3814610460578063b6b55f251461047c578063cc7a262e14610498578063ccd34cd5146104b657610211565b80638f662915146103e05780639513997f146103fe5780639bdcecd11461041a578063a218141b1461043857610211565b80634e71d92d116101a8578063715018a611610177578063715018a6146103745780637bfaa40c1461037e57806380dc06721461039a5780638ae39cac146103a45780638da5cb5b146103c257610211565b80634e71d92d14610312578063576e093b1461031c5780635bb06ead146103385780636aa662b51461035657610211565b80632e1a7d4d116101e45780632e1a7d4d1461029e5780633f138d4b146102ba57806341275358146102d657806348cd4cb1146102f457610211565b806301f8a97614610216578063083c63231461023257806310f8097b146102505780631959a0021461026c575b600080fd5b610230600480360381019061022b9190612a04565b6105d8565b005b61023a6106d9565b6040516102479190612ff4565b60405180910390f35b61026a60048036038101906102659190612a04565b6106df565b005b61028660048036038101906102819190612976565b610779565b60405161029593929190613038565b60405180910390f35b6102b860048036038101906102b39190612a04565b6107a3565b005b6102d460048036038101906102cf919061299f565b610b07565b005b6102de610d0d565b6040516102eb9190612d5c565b60405180910390f35b6102fc610d33565b6040516103099190612ff4565b60405180910390f35b61031a610d39565b005b61033660048036038101906103319190612976565b610ec9565b005b6103406110cc565b60405161034d9190612ff4565b60405180910390f35b61035e611106565b60405161036b9190612ff4565b60405180910390f35b61037c61110c565b005b61039860048036038101906103939190612a04565b611194565b005b6103a26112b3565b005b6103ac611338565b6040516103b99190612ff4565b60405180910390f35b6103ca61133e565b6040516103d79190612d5c565b60405180910390f35b6103e8611367565b6040516103f59190612ff4565b60405180910390f35b61041860048036038101906104139190612a56565b61136d565b005b610422611505565b60405161042f919061306f565b60405180910390f35b610440611518565b60405161044d9190612ff4565b60405180910390f35b61045e61151e565b005b61047a60048036038101906104759190612a04565b61166c565b005b61049660048036038101906104919190612a04565b6117a4565b005b6104a06119cd565b6040516104ad9190612dd7565b60405180910390f35b6104be6119f3565b6040516104cb9190612ff4565b60405180910390f35b6104ee60048036038101906104e99190612a56565b6119f9565b005b6104f8611a8b565b005b610514600480360381019061050f9190612a04565b611cae565b005b61051e611d6d565b60405161052b9190612ff4565b60405180910390f35b61054e60048036038101906105499190612a04565b611d73565b005b61056a60048036038101906105659190612976565b611e3f565b005b61058660048036038101906105819190612976565b611f37565b6040516105939190612ff4565b60405180910390f35b6105a4612143565b6040516105b19190612ff4565b60405180910390f35b6105c2612161565b6040516105cf9190612dd7565b60405180910390f35b6105e061219d565b73ffffffffffffffffffffffffffffffffffffffff166105fe61133e565b73ffffffffffffffffffffffffffffffffffffffff1614610654576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161064b90612f14565b60405180910390fd5b6004544310610698576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161068f90612e54565b60405180910390fd5b806006819055507f0c4d677eef92893ac7ec52faf8140fc6c851ab4736302b4f3a89dfb20696a0df816040516106ce9190612ff4565b60405180910390a150565b60035481565b6106e761219d565b73ffffffffffffffffffffffffffffffffffffffff1661070561133e565b73ffffffffffffffffffffffffffffffffffffffff161461075b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161075290612f14565b60405180910390fd5b61077661077182436121a590919063ffffffff16565b61166c565b50565b600d6020528060005260406000206000915090508060000154908060010154908060020154905083565b600260015414156107e9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107e090612fd4565b60405180910390fd5b600260018190555060008111610834576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161082b90612ed4565b60405180910390fd5b6000600d60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905081816000015410156108be576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108b590612f54565b60405180910390fd5b6108c66121bb565b600061090b82600101546108fd6009546108ef600254876000015461230590919063ffffffff16565b61231b90919063ffffffff16565b61218790919063ffffffff16565b905061092483836000015461218790919063ffffffff16565b82600001819055506000839050600754836002015461094391906130bc565b4210156109f65760006109756127106109676008548561230590919063ffffffff16565b61231b90919063ffffffff16565b90506109e6600a60019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1682600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166123319092919063ffffffff16565b80826109f2919061330e565b9150505b610a433382600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166123319092919063ffffffff16565b6000836002015414610a59578260020154610a5b565b425b83600201819055506000821115610a7757610a7633836123b7565b5b610aa4600954610a96600254866000015461230590919063ffffffff16565b61231b90919063ffffffff16565b83600101819055503373ffffffffffffffffffffffffffffffffffffffff167f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a942436485604051610af29190612ff4565b60405180910390a25050506001808190555050565b610b0f61219d565b73ffffffffffffffffffffffffffffffffffffffff16610b2d61133e565b73ffffffffffffffffffffffffffffffffffffffff1614610b83576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b7a90612f14565b60405180910390fd5b600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610c14576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c0b90612f94565b60405180910390fd5b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610ca5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c9c90612f34565b60405180910390fd5b610cd033828473ffffffffffffffffffffffffffffffffffffffff166123319092919063ffffffff16565b7f74545154aac348a3eac92596bd1971957ca94795f4e954ec5f613b55fab781298282604051610d01929190612dae565b60405180910390a15050565b600a60019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60045481565b60026001541415610d7f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d7690612fd4565b60405180910390fd5b60026001819055506000600d60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050610dd26121bb565b600081600001541115610e8a576000610e248260010154610e16600954610e08600254876000015461230590919063ffffffff16565b61231b90919063ffffffff16565b61218790919063ffffffff16565b90506000811115610e8857610e3933826123b7565b3373ffffffffffffffffffffffffffffffffffffffff167f47cee97cb7acd717b3c0aa1435d004cd5b3c8c57d70dbceb4e4458bbd60e39d482604051610e7f9190612ff4565b60405180910390a25b505b610eb7600954610ea9600254846000015461230590919063ffffffff16565b61231b90919063ffffffff16565b81600101819055505060018081905550565b610ed161219d565b73ffffffffffffffffffffffffffffffffffffffff16610eef61133e565b73ffffffffffffffffffffffffffffffffffffffff1614610f45576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f3c90612f14565b60405180910390fd5b6003544311610f89576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f8090612e34565b60405180910390fd5b6000600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610fe69190612d5c565b60206040518083038186803b158015610ffe57600080fd5b505afa158015611012573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110369190612a2d565b90506000811161107b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161107290612eb4565b60405180910390fd5b6110c88282600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166123319092919063ffffffff16565b5050565b6000611101600a60009054906101000a900460ff1660ff16600a6110f09190613196565b60065461231b90919063ffffffff16565b905090565b60075481565b61111461219d565b73ffffffffffffffffffffffffffffffffffffffff1661113261133e565b73ffffffffffffffffffffffffffffffffffffffff1614611188576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161117f90612f14565b60405180910390fd5b6111926000612513565b565b61119c61219d565b73ffffffffffffffffffffffffffffffffffffffff166111ba61133e565b73ffffffffffffffffffffffffffffffffffffffff1614611210576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161120790612f14565b60405180910390fd5b6004544310611254576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161124b90612e54565b60405180910390fd5b611269816004546121a590919063ffffffff16565b60038190555061127761151e565b7f55baa248360bce74a89304071ca6e882f61d2226c15dde53a4ec1e05af523d926003546040516112a89190612ff4565b60405180910390a150565b6112bb61219d565b73ffffffffffffffffffffffffffffffffffffffff166112d961133e565b73ffffffffffffffffffffffffffffffffffffffff161461132f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161132690612f14565b60405180910390fd5b43600381905550565b60065481565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60025481565b61137561219d565b73ffffffffffffffffffffffffffffffffffffffff1661139361133e565b73ffffffffffffffffffffffffffffffffffffffff16146113e9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113e090612f14565b60405180910390fd5b600454431061142d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161142490612e54565b60405180910390fd5b80821061146f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161146690612e74565b60405180910390fd5b8143106114b1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114a890612ef4565b60405180910390fd5b81600481905550806003819055506004546005819055507f7cd0ab87d19036f3dfadadb232c78aa4879dda3f0c994a9d637532410ee2ce0682826040516114f992919061300f565b60405180910390a15050565b600a60009054906101000a900460ff1681565b60055481565b61152661219d565b73ffffffffffffffffffffffffffffffffffffffff1661154461133e565b73ffffffffffffffffffffffffffffffffffffffff161461159a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161159190612f14565b60405180910390fd5b6000600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016115f79190612d5c565b60206040518083038186803b15801561160f57600080fd5b505afa158015611623573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116479190612a2d565b9050611663611654612143565b8261231b90919063ffffffff16565b60068190555050565b61167461219d565b73ffffffffffffffffffffffffffffffffffffffff1661169261133e565b73ffffffffffffffffffffffffffffffffffffffff16146116e8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116df90612f14565b60405180910390fd5b600454431061172c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161172390612e54565b60405180910390fd5b6000611736612143565b905081600481905550611754816004546121a590919063ffffffff16565b6003819055506004546005819055507f7cd0ab87d19036f3dfadadb232c78aa4879dda3f0c994a9d637532410ee2ce0660045460035460405161179892919061300f565b60405180910390a15050565b600260015414156117ea576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117e190612fd4565b60405180910390fd5b60026001819055506000600d60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905061183d6121bb565b6000816000015411156118a757600061188f8260010154611881600954611873600254876000015461230590919063ffffffff16565b61231b90919063ffffffff16565b61218790919063ffffffff16565b905060008111156118a5576118a433826123b7565b5b505b600082111561193f576118c78282600001546121a590919063ffffffff16565b816000018190555061191e333084600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166125d7909392919063ffffffff16565b6000816002015414611934578060020154611936565b425b81600201819055505b61196c60095461195e600254846000015461230590919063ffffffff16565b61231b90919063ffffffff16565b81600101819055503373ffffffffffffffffffffffffffffffffffffffff167fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c836040516119ba9190612ff4565b60405180910390a2506001808190555050565b600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60095481565b611a0161219d565b73ffffffffffffffffffffffffffffffffffffffff16611a1f61133e565b73ffffffffffffffffffffffffffffffffffffffff1614611a75576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a6c90612f14565b60405180910390fd5b611a7e8261166c565b611a8781611194565b5050565b60026001541415611ad1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ac890612fd4565b60405180910390fd5b60026001819055506000600d60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905060008160000154905060008260000181905550600082600101819055506000811115611c55576007548260020154611b5491906130bc565b421015611c07576000611b86612710611b786008548561230590919063ffffffff16565b61231b90919063ffffffff16565b9050611bf7600a60019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1682600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166123319092919063ffffffff16565b8082611c03919061330e565b9150505b611c543382600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166123319092919063ffffffff16565b5b3373ffffffffffffffffffffffffffffffffffffffff167f5fafa99d0643513820be26656b45130b01e1c03062e1266bf36f88cbd3bd969582604051611c9b9190612ff4565b60405180910390a2505060018081905550565b611cb661219d565b73ffffffffffffffffffffffffffffffffffffffff16611cd461133e565b73ffffffffffffffffffffffffffffffffffffffff1614611d2a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d2190612f14565b60405180910390fd5b806007819055507fd2a4f919593bfa0565c404bb5e42080750d07eedb9dfa9907c22be9e29c02a98600754604051611d629190612ff4565b60405180910390a150565b60085481565b611d7b61219d565b73ffffffffffffffffffffffffffffffffffffffff16611d9961133e565b73ffffffffffffffffffffffffffffffffffffffff1614611def576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611de690612f14565b60405180910390fd5b611e3c3082600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166123319092919063ffffffff16565b50565b611e4761219d565b73ffffffffffffffffffffffffffffffffffffffff16611e6561133e565b73ffffffffffffffffffffffffffffffffffffffff1614611ebb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611eb290612f14565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611f2b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f2290612e14565b60405180910390fd5b611f3481612513565b50565b600080600d60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506000600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401611fd89190612d5c565b60206040518083038186803b158015611ff057600080fd5b505afa158015612004573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120289190612a2d565b90506005544311801561203c575060008114155b156120f657600061204f60055443612660565b905060006120686006548361230590919063ffffffff16565b905060006120a7612096856120886009548661230590919063ffffffff16565b61231b90919063ffffffff16565b6002546121a590919063ffffffff16565b90506120ea85600101546120dc6009546120ce858a6000015461230590919063ffffffff16565b61231b90919063ffffffff16565b61218790919063ffffffff16565b9550505050505061213e565b612139826001015461212b60095461211d600254876000015461230590919063ffffffff16565b61231b90919063ffffffff16565b61218790919063ffffffff16565b925050505b919050565b600061215c60045460035461218790919063ffffffff16565b905090565b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008183612195919061330e565b905092915050565b600033905090565b600081836121b391906130bc565b905092915050565b60055443116121c957612303565b6000600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016122269190612d5c565b60206040518083038186803b15801561223e57600080fd5b505afa158015612252573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122769190612a2d565b9050600081141561228e574360058190555050612303565b600061229c60055443612660565b905060006122b56006548361230590919063ffffffff16565b90506122f26122e1846122d36009548561230590919063ffffffff16565b61231b90919063ffffffff16565b6002546121a590919063ffffffff16565b600281905550436005819055505050505b565b6000818361231391906132b4565b905092915050565b600081836123299190613112565b905092915050565b6123b28363a9059cbb60e01b8484604051602401612350929190612dae565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506126b5565b505050565b6000600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016124149190612d5c565b60206040518083038186803b15801561242c57600080fd5b505afa158015612440573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124649190612a2d565b9050808211156124c0576124bb8382600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166123319092919063ffffffff16565b61250e565b61250d8383600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166123319092919063ffffffff16565b5b505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b61265a846323b872dd60e01b8585856040516024016125f893929190612d77565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506126b5565b50505050565b600060035482116126855761267e838361218790919063ffffffff16565b90506126af565b600354831061269757600090506126af565b6126ac8360035461218790919063ffffffff16565b90505b92915050565b6000612717826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff1661277c9092919063ffffffff16565b9050600081511115612777578080602001905181019061273791906129db565b612776576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161276d90612fb4565b60405180910390fd5b5b505050565b606061278b8484600085612794565b90509392505050565b6060824710156127d9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016127d090612e94565b60405180910390fd5b6127e2856128a8565b612821576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161281890612f74565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff16858760405161284a9190612d45565b60006040518083038185875af1925050503d8060008114612887576040519150601f19603f3d011682016040523d82523d6000602084013e61288c565b606091505b509150915061289c8282866128bb565b92505050949350505050565b600080823b905060008111915050919050565b606083156128cb5782905061291b565b6000835111156128de5782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016129129190612df2565b60405180910390fd5b9392505050565b6000813590506129318161378f565b92915050565b600081519050612946816137a6565b92915050565b60008135905061295b816137bd565b92915050565b600081519050612970816137bd565b92915050565b60006020828403121561298857600080fd5b600061299684828501612922565b91505092915050565b600080604083850312156129b257600080fd5b60006129c085828601612922565b92505060206129d18582860161294c565b9150509250929050565b6000602082840312156129ed57600080fd5b60006129fb84828501612937565b91505092915050565b600060208284031215612a1657600080fd5b6000612a248482850161294c565b91505092915050565b600060208284031215612a3f57600080fd5b6000612a4d84828501612961565b91505092915050565b60008060408385031215612a6957600080fd5b6000612a778582860161294c565b9250506020612a888582860161294c565b9150509250929050565b612a9b81613342565b82525050565b6000612aac8261308a565b612ab681856130a0565b9350612ac68185602086016133bb565b80840191505092915050565b612adb81613397565b82525050565b6000612aec82613095565b612af681856130ab565b9350612b068185602086016133bb565b612b0f8161344c565b840191505092915050565b6000612b276026836130ab565b9150612b328261346a565b604082019050919050565b6000612b4a601c836130ab565b9150612b55826134b9565b602082019050919050565b6000612b6d6010836130ab565b9150612b78826134e2565b602082019050919050565b6000612b90602e836130ab565b9150612b9b8261350b565b604082019050919050565b6000612bb36026836130ab565b9150612bbe8261355a565b604082019050919050565b6000612bd66019836130ab565b9150612be1826135a9565b602082019050919050565b6000612bf96015836130ab565b9150612c04826135d2565b602082019050919050565b6000612c1c6030836130ab565b9150612c27826135fb565b604082019050919050565b6000612c3f6020836130ab565b9150612c4a8261364a565b602082019050919050565b6000612c626016836130ab565b9150612c6d82613673565b602082019050919050565b6000612c85601b836130ab565b9150612c908261369c565b602082019050919050565b6000612ca8601d836130ab565b9150612cb3826136c5565b602082019050919050565b6000612ccb6016836130ab565b9150612cd6826136ee565b602082019050919050565b6000612cee602a836130ab565b9150612cf982613717565b604082019050919050565b6000612d11601f836130ab565b9150612d1c82613766565b602082019050919050565b612d3081613380565b82525050565b612d3f8161338a565b82525050565b6000612d518284612aa1565b915081905092915050565b6000602082019050612d716000830184612a92565b92915050565b6000606082019050612d8c6000830186612a92565b612d996020830185612a92565b612da66040830184612d27565b949350505050565b6000604082019050612dc36000830185612a92565b612dd06020830184612d27565b9392505050565b6000602082019050612dec6000830184612ad2565b92915050565b60006020820190508181036000830152612e0c8184612ae1565b905092915050565b60006020820190508181036000830152612e2d81612b1a565b9050919050565b60006020820190508181036000830152612e4d81612b3d565b9050919050565b60006020820190508181036000830152612e6d81612b60565b9050919050565b60006020820190508181036000830152612e8d81612b83565b9050919050565b60006020820190508181036000830152612ead81612ba6565b9050919050565b60006020820190508181036000830152612ecd81612bc9565b9050919050565b60006020820190508181036000830152612eed81612bec565b9050919050565b60006020820190508181036000830152612f0d81612c0f565b9050919050565b60006020820190508181036000830152612f2d81612c32565b9050919050565b60006020820190508181036000830152612f4d81612c55565b9050919050565b60006020820190508181036000830152612f6d81612c78565b9050919050565b60006020820190508181036000830152612f8d81612c9b565b9050919050565b60006020820190508181036000830152612fad81612cbe565b9050919050565b60006020820190508181036000830152612fcd81612ce1565b9050919050565b60006020820190508181036000830152612fed81612d04565b9050919050565b60006020820190506130096000830184612d27565b92915050565b60006040820190506130246000830185612d27565b6130316020830184612d27565b9392505050565b600060608201905061304d6000830186612d27565b61305a6020830185612d27565b6130676040830184612d27565b949350505050565b60006020820190506130846000830184612d36565b92915050565b600081519050919050565b600081519050919050565b600081905092915050565b600082825260208201905092915050565b60006130c782613380565b91506130d283613380565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115613107576131066133ee565b5b828201905092915050565b600061311d82613380565b915061312883613380565b9250826131385761313761341d565b5b828204905092915050565b6000808291508390505b600185111561318d57808604811115613169576131686133ee565b5b60018516156131785780820291505b80810290506131868561345d565b945061314d565b94509492505050565b60006131a182613380565b91506131ac83613380565b92506131d97fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff84846131e1565b905092915050565b6000826131f157600190506132ad565b816131ff57600090506132ad565b8160018114613215576002811461321f5761324e565b60019150506132ad565b60ff841115613231576132306133ee565b5b8360020a915084821115613248576132476133ee565b5b506132ad565b5060208310610133831016604e8410600b84101617156132835782820a90508381111561327e5761327d6133ee565b5b6132ad565b6132908484846001613143565b925090508184048111156132a7576132a66133ee565b5b81810290505b9392505050565b60006132bf82613380565b91506132ca83613380565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615613303576133026133ee565b5b828202905092915050565b600061331982613380565b915061332483613380565b925082821015613337576133366133ee565b5b828203905092915050565b600061334d82613360565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b60006133a2826133a9565b9050919050565b60006133b482613360565b9050919050565b60005b838110156133d95780820151818401526020810190506133be565b838111156133e8576000848401525b50505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000601f19601f8301169050919050565b60008160011c9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f4572726f723a20506f6f6c206e6f742066696e69736865642079657400000000600082015250565b7f506f6f6c20686173207374617274656400000000000000000000000000000000600082015250565b7f4e6577207374617274426c6f636b206d757374206265206c6f7765722074686160008201527f6e206e657720656e64426c6f636b000000000000000000000000000000000000602082015250565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b7f4572726f723a204e6f2072656d61696e696e672066756e647300000000000000600082015250565b7f4572726f723a20496e76616c696420616d6f756e740000000000000000000000600082015250565b7f4e6577207374617274426c6f636b206d7573742062652068696768657220746860008201527f616e2063757272656e7420626c6f636b00000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f43616e6e6f742062652072657761726420746f6b656e00000000000000000000600082015250565b7f416d6f756e7420746f20776974686472617720746f6f20686967680000000000600082015250565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b7f43616e6e6f74206265207374616b656420746f6b656e00000000000000000000600082015250565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b61379881613342565b81146137a357600080fd5b50565b6137af81613354565b81146137ba57600080fd5b50565b6137c681613380565b81146137d157600080fd5b5056fea264697066735822122042192a0e32122d741f14d97d1b823e815cdee239bbda43e268be33268207282f64736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "recoverWrongTokens(address,uint256)": {
        "details": "This function is only callable by admin.",
        "params": {
          "_tokenAddress": ": the address of the token to withdraw",
          "_tokenAmount": ": the number of tokens to withdraw"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateStartAndEndBlocks(uint256,uint256)": {
        "details": "This function is only callable by owner.",
        "params": {
          "_bonusEndBlock": ": the new end block",
          "_startBlock": ": the new start block"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "recoverWrongTokens(address,uint256)": {
        "notice": "It allows the admin to recover wrong tokens sent to the contract"
      },
      "updateStartAndEndBlocks(uint256,uint256)": {
        "notice": "It allows the admin to update start and end blocks"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/GQGalacticReserve.sol:GQGalacticReserve",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 115,
        "contract": "contracts/GQGalacticReserve.sol:GQGalacticReserve",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 1668,
        "contract": "contracts/GQGalacticReserve.sol:GQGalacticReserve",
        "label": "accTokenPerShare",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 1670,
        "contract": "contracts/GQGalacticReserve.sol:GQGalacticReserve",
        "label": "endBlock",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 1672,
        "contract": "contracts/GQGalacticReserve.sol:GQGalacticReserve",
        "label": "startBlock",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 1674,
        "contract": "contracts/GQGalacticReserve.sol:GQGalacticReserve",
        "label": "lastUpdateBlock",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 1676,
        "contract": "contracts/GQGalacticReserve.sol:GQGalacticReserve",
        "label": "rewardPerBlock",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 1678,
        "contract": "contracts/GQGalacticReserve.sol:GQGalacticReserve",
        "label": "lockUpDuration",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 1680,
        "contract": "contracts/GQGalacticReserve.sol:GQGalacticReserve",
        "label": "withdrawFee",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 1682,
        "contract": "contracts/GQGalacticReserve.sol:GQGalacticReserve",
        "label": "PRECISION_FACTOR",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 1684,
        "contract": "contracts/GQGalacticReserve.sol:GQGalacticReserve",
        "label": "rewardTokenDecimals",
        "offset": 0,
        "slot": "10",
        "type": "t_uint8"
      },
      {
        "astId": 1686,
        "contract": "contracts/GQGalacticReserve.sol:GQGalacticReserve",
        "label": "feeAddress",
        "offset": 1,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 1689,
        "contract": "contracts/GQGalacticReserve.sol:GQGalacticReserve",
        "label": "rewardToken",
        "offset": 0,
        "slot": "11",
        "type": "t_contract(IERC20)768"
      },
      {
        "astId": 1692,
        "contract": "contracts/GQGalacticReserve.sol:GQGalacticReserve",
        "label": "stakedToken",
        "offset": 0,
        "slot": "12",
        "type": "t_contract(IERC20)768"
      },
      {
        "astId": 1697,
        "contract": "contracts/GQGalacticReserve.sol:GQGalacticReserve",
        "label": "userInfo",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_address,t_struct(UserInfo)1704_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)768": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(UserInfo)1704_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct GQGalacticReserve.UserInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(UserInfo)1704_storage"
      },
      "t_struct(UserInfo)1704_storage": {
        "encoding": "inplace",
        "label": "struct GQGalacticReserve.UserInfo",
        "members": [
          {
            "astId": 1699,
            "contract": "contracts/GQGalacticReserve.sol:GQGalacticReserve",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1701,
            "contract": "contracts/GQGalacticReserve.sol:GQGalacticReserve",
            "label": "rewardDebt",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1703,
            "contract": "contracts/GQGalacticReserve.sol:GQGalacticReserve",
            "label": "firstDeposit",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}
{
  "address": "0x56050130926E269091C13EC9A3Da98eF9a325E03",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenRecovered",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "AdminTokenRecovery",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Claim",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "EmergencyWithdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "endBlock",
          "type": "uint256"
        }
      ],
      "name": "NewEndBlock",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lockUpDuration",
          "type": "uint256"
        }
      ],
      "name": "NewLockUpDuration",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rewardPerBlock",
          "type": "uint256"
        }
      ],
      "name": "NewRewardPerBlock",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "startBlock",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "endBlock",
          "type": "uint256"
        }
      ],
      "name": "NewStartAndEndBlocks",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        }
      ],
      "name": "RewardsStop",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_rewardTokenId",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "depositRewardTokenFunds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "emergencyWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "endBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "_stakedToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_rewardToken1",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_rewardToken2",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_startBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_endBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_lockUpDuration",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_withdrawFee",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_feeAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_maxStakeAmount",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isInitialized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastUpdateBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lockUpDuration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "mapOfAccTokenPerShare",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "mapOfPrecisionFactor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "mapOfRewardPerBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "mapOfRewardTokenDecimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "mapOfRewardTokens",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxStakeAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_rewardTokenId",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "pendingReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_rewardTokenId",
          "type": "uint8"
        }
      ],
      "name": "poolCalcRewardPerBlock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_durationBlocks",
          "type": "uint256"
        }
      ],
      "name": "poolSetDuration",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_startBlock",
          "type": "uint256"
        }
      ],
      "name": "poolSetStart",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_startBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_durationBlocks",
          "type": "uint256"
        }
      ],
      "name": "poolSetStartAndDuration",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_blocks",
          "type": "uint256"
        }
      ],
      "name": "poolStartIn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "recoverWrongTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_rewardTokenId",
          "type": "uint8"
        }
      ],
      "name": "rewarPerBlockUI",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardDuration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_lockUpDuration",
          "type": "uint256"
        }
      ],
      "name": "setLockUpDuration",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakedToken",
      "outputs": [
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stopReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_rewardTokenId",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_rewardPerBlock",
          "type": "uint256"
        }
      ],
      "name": "updateRewardPerBlock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_startBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_bonusEndBlock",
          "type": "uint256"
        }
      ],
      "name": "updateStartAndEndBlocks",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rewardDebt1",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rewardDebt2",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "firstDeposit",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_rewardTokenId",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "withdrawRemains",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xa11e95c6d9406361b387c41dd3ca2fbb88270910c374bde1e2dc7056f58ef651",
  "receipt": {
    "to": null,
    "from": "0xB6Af19068482ec5feb4c4ef7f81a4dFdFa0BbAD2",
    "contractAddress": "0x56050130926E269091C13EC9A3Da98eF9a325E03",
    "transactionIndex": 105,
    "gasUsed": "2438414",
    "logsBloom": "0x
    "blockHash": "0x5ae15cde07baf0681c4765465c80d9f4bac72073cc0eca6b7561d47315f32591",
    "transactionHash": "0xa11e95c6d9406361b387c41dd3ca2fbb88270910c374bde1e2dc7056f58ef651",
    "logs": [],
    "blockNumber": 19942246,
    "cumulativeGasUsed": "14724186",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "437a4d45ffebc89298110c7a29fd2972",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenRecovered\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AdminTokenRecovery\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endBlock\",\"type\":\"uint256\"}],\"name\":\"NewEndBlock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockUpDuration\",\"type\":\"uint256\"}],\"name\":\"NewLockUpDuration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardPerBlock\",\"type\":\"uint256\"}],\"name\":\"NewRewardPerBlock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endBlock\",\"type\":\"uint256\"}],\"name\":\"NewStartAndEndBlocks\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"RewardsStop\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_rewardTokenId\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"depositRewardTokenFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"_stakedToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardToken1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardToken2\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lockUpDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_withdrawFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_feeAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_maxStakeAmount\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isInitialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUpdateBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockUpDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"mapOfAccTokenPerShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"mapOfPrecisionFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"mapOfRewardPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"mapOfRewardTokenDecimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"mapOfRewardTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxStakeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_rewardTokenId\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_rewardTokenId\",\"type\":\"uint8\"}],\"name\":\"poolCalcRewardPerBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_durationBlocks\",\"type\":\"uint256\"}],\"name\":\"poolSetDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startBlock\",\"type\":\"uint256\"}],\"name\":\"poolSetStart\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_durationBlocks\",\"type\":\"uint256\"}],\"name\":\"poolSetStartAndDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_blocks\",\"type\":\"uint256\"}],\"name\":\"poolStartIn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"recoverWrongTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_rewardTokenId\",\"type\":\"uint8\"}],\"name\":\"rewarPerBlockUI\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lockUpDuration\",\"type\":\"uint256\"}],\"name\":\"setLockUpDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakedToken\",\"outputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stopReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_rewardTokenId\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_rewardPerBlock\",\"type\":\"uint256\"}],\"name\":\"updateRewardPerBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bonusEndBlock\",\"type\":\"uint256\"}],\"name\":\"updateStartAndEndBlocks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"firstDeposit\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_rewardTokenId\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"withdrawRemains\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"recoverWrongTokens(address,uint256)\":{\"details\":\"This function is only callable by admin.\",\"params\":{\"_tokenAddress\":\": the address of the token to withdraw\",\"_tokenAmount\":\": the number of tokens to withdraw\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateStartAndEndBlocks(uint256,uint256)\":{\"details\":\"This function is only callable by owner.\",\"params\":{\"_bonusEndBlock\":\": the new end block\",\"_startBlock\":\": the new start block\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"recoverWrongTokens(address,uint256)\":{\"notice\":\"It allows the admin to recover wrong tokens sent to the contract\"},\"updateStartAndEndBlocks(uint256,uint256)\":{\"notice\":\"It allows the admin to update start and end blocks\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/GQGalacticAllianceLimited.sol\":\"GQGalacticAllianceLimited\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x652fee292f698d8dba81bf287cb71f1682f6483b67ebe601a5f7387dcfc30b34\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x372b0bc04e3b4c074559bbbfb1317afddb56de5504158ca25a7f9cd403980445\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x8cc03c5ac17e8a7396e487cda41fc1f1dfdb91db7d528e6da84bee3b6dd7e167\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x6777f3fccb5dab95a9088ef62c41bee0198fd92e50d7c94f0e3733788af4079e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x605434219ebbe4653f703640f06969faa5a1d78f0bfef878e5ddbb1ca369ceeb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3e26a49d2fa5ef8338b8a9467c91e54f417cb07e849b1cc0f4ebc4d2a147938e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMathUpgradeable {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0ac286be11c2345f71d938119e638483fc1ddb9f56b7da00dd470adcd977f439\",\"license\":\"MIT\"},\"contracts/GQGalacticAllianceLimited.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\n\\ncontract GQGalacticAllianceLimited is\\n    Initializable,\\n    OwnableUpgradeable,\\n    ReentrancyGuardUpgradeable\\n{\\n    using SafeMathUpgradeable for uint256;\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n\\n    uint8 constant TOKEN1 = 1;\\n    uint8 constant TOKEN2 = 2;\\n\\n    // Is contract initialized\\n    bool public isInitialized;\\n\\n    // The block number when REWARD distribution ends.\\n    uint256 public endBlock;\\n\\n    // The block number when REWARD distribution starts.\\n    uint256 public startBlock;\\n\\n    // The block number of the last pool update\\n    uint256 public lastUpdateBlock;\\n\\n    // Lockup duration for deposit\\n    uint256 public lockUpDuration;\\n\\n    // The limit amount for staking\\n    uint256 public maxStakeAmount;\\n\\n    // Withdraw fee in BP\\n    uint256 public withdrawFee;\\n\\n    // Withdraw fee destiny address\\n    address public feeAddress;\\n\\n    // The staked token\\n    IERC20Upgradeable public stakedToken;\\n\\n    // Accrued token per share\\n    mapping(uint8 => uint256) public mapOfAccTokenPerShare;\\n\\n    // REWARD tokens created per block.\\n    mapping(uint8 => uint256) public mapOfRewardPerBlock;\\n\\n    // The precision factor for reward tokens\\n    mapping(uint8 => uint256) public mapOfPrecisionFactor;\\n\\n    // decimals places of the reward token\\n    mapping(uint8 => uint8) public mapOfRewardTokenDecimals;\\n\\n    // The reward token\\n    mapping(uint8 => address) public mapOfRewardTokens;\\n\\n    // Info of each user that stakes tokens (stakedToken)\\n    mapping(address => UserInfo) public userInfo;\\n\\n    struct UserInfo {\\n        uint256 amount; // Staked tokens the user has provided\\n        uint256 rewardDebt1; // Reward debt1\\n        uint256 rewardDebt2; // Reward debt2\\n        uint256 firstDeposit; // First deposit before withdraw\\n    }\\n\\n    event AdminTokenRecovery(address tokenRecovered, uint256 amount);\\n    event Deposit(address indexed user, uint256 amount);\\n    event Claim(address indexed user, uint256 amount);\\n    event EmergencyWithdraw(address indexed user, uint256 amount);\\n    event NewStartAndEndBlocks(uint256 startBlock, uint256 endBlock);\\n    event NewEndBlock(uint256 endBlock);\\n    event NewRewardPerBlock(uint256 rewardPerBlock);\\n    event RewardsStop(uint256 blockNumber);\\n    event Withdraw(address indexed user, uint256 amount);\\n    event NewLockUpDuration(uint256 lockUpDuration);\\n\\n    constructor() initializer {}\\n\\n    /*\\n     * @notice Constructor of the contract\\n     * @param _stakedToken: staked token address\\n     * @param _rewardToken1: reward token1 address\\n     * @param _rewardToken2: reward token2 address\\n     * @param _rewardPerBlock: reward per block (in rewardToken)\\n     * @param _startBlock: start block\\n     * @param _endBlock: end block\\n     * @param _lockUpDuration: duration for the deposit\\n     * @param _withdrawFee: fee for early withdraw\\n     * @param _feeAddress: address where fees for early withdraw will be send\\n     */\\n    function initialize(\\n        IERC20Upgradeable _stakedToken,\\n        address _rewardToken1,\\n        address _rewardToken2,\\n        uint256 _startBlock,\\n        uint256 _endBlock,\\n        uint256 _lockUpDuration,\\n        uint256 _withdrawFee,\\n        address _feeAddress,\\n        uint256 _maxStakeAmount\\n    ) public initializer {\\n        __Ownable_init();\\n        stakedToken = _stakedToken;\\n        mapOfRewardTokens[TOKEN1] = _rewardToken1;\\n        mapOfRewardTokens[TOKEN2] = _rewardToken2;\\n        startBlock = _startBlock;\\n        endBlock = _endBlock;\\n        lockUpDuration = _lockUpDuration;\\n        withdrawFee = _withdrawFee;\\n        feeAddress = _feeAddress;\\n        maxStakeAmount = _maxStakeAmount;\\n\\n        mapOfRewardTokenDecimals[TOKEN1] = IERC20MetadataUpgradeable(\\n            mapOfRewardTokens[TOKEN1]\\n        ).decimals();\\n        mapOfRewardTokenDecimals[TOKEN2] = IERC20MetadataUpgradeable(\\n            mapOfRewardTokens[TOKEN2]\\n        ).decimals();\\n        require(\\n            mapOfRewardTokenDecimals[TOKEN1] < 30 &&\\n                mapOfRewardTokenDecimals[TOKEN2] < 30,\\n            \\\"Must be inferior to 30\\\"\\n        );\\n\\n        mapOfPrecisionFactor[TOKEN1] = uint256(\\n            10**(uint256(30).sub(uint256(mapOfRewardTokenDecimals[TOKEN1])))\\n        );\\n        mapOfPrecisionFactor[TOKEN2] = uint256(\\n            10**(uint256(30).sub(uint256(mapOfRewardTokenDecimals[TOKEN2])))\\n        );\\n\\n        // Set the lastRewardBlock as the startBlock\\n        lastUpdateBlock = startBlock;\\n\\n        isInitialized = true;\\n    }\\n\\n    /*\\n     * @notice Deposit staked tokens and collect reward tokens (if any)\\n     * @param _amount: amount to deposit (in stakedToken)\\n     */\\n    function deposit(uint256 _amount) external nonReentrant {\\n        UserInfo storage user = userInfo[msg.sender];\\n        require(\\n            user.amount + _amount <= maxStakeAmount,\\n            \\\"deposit: limit reached\\\"\\n        );\\n        _updatePool();\\n\\n        if (user.amount > 0) {\\n            uint256 pendingToken1 = user\\n                .amount\\n                .mul(mapOfAccTokenPerShare[TOKEN1])\\n                .div(mapOfPrecisionFactor[TOKEN1])\\n                .sub(user.rewardDebt1);\\n            if (pendingToken1 > 0) {\\n                _safeTokenTransfer(\\n                    mapOfRewardTokens[TOKEN1],\\n                    msg.sender,\\n                    pendingToken1\\n                );\\n            }\\n            uint256 pendingToken2 = user\\n                .amount\\n                .mul(mapOfAccTokenPerShare[TOKEN2])\\n                .div(mapOfPrecisionFactor[TOKEN2])\\n                .sub(user.rewardDebt2);\\n\\n            if (pendingToken2 > 0) {\\n                _safeTokenTransfer(\\n                    mapOfRewardTokens[TOKEN2],\\n                    msg.sender,\\n                    pendingToken2\\n                );\\n            }\\n        }\\n\\n        if (_amount > 0) {\\n            user.amount = user.amount.add(_amount);\\n            stakedToken.safeTransferFrom(\\n                address(msg.sender),\\n                address(this),\\n                _amount\\n            );\\n            user.firstDeposit = user.firstDeposit == 0\\n                ? block.timestamp\\n                : user.firstDeposit;\\n        }\\n\\n        user.rewardDebt1 = user.amount.mul(mapOfAccTokenPerShare[TOKEN1]).div(\\n            mapOfPrecisionFactor[TOKEN1]\\n        );\\n\\n        user.rewardDebt2 = user.amount.mul(mapOfAccTokenPerShare[TOKEN2]).div(\\n            mapOfPrecisionFactor[TOKEN2]\\n        );\\n\\n        emit Deposit(msg.sender, _amount);\\n    }\\n\\n    /*\\n     * @notice Withdraw staked tokens and collect reward tokens\\n     * @param _amount: amount to withdraw (in rewardToken)\\n     */\\n    function withdraw(uint256 _amount) external nonReentrant {\\n        require(_amount > 0, \\\"Error: Invalid amount\\\");\\n        UserInfo storage user = userInfo[msg.sender];\\n        require(user.amount >= _amount, \\\"Amount to withdraw too high\\\");\\n        _updatePool();\\n\\n        uint256 pendingToken1 = user\\n            .amount\\n            .mul(mapOfAccTokenPerShare[TOKEN1])\\n            .div(mapOfPrecisionFactor[TOKEN1])\\n            .sub(user.rewardDebt1);\\n        uint256 pendingToken2 = user\\n            .amount\\n            .mul(mapOfAccTokenPerShare[TOKEN2])\\n            .div(mapOfPrecisionFactor[TOKEN2])\\n            .sub(user.rewardDebt2);\\n\\n        user.amount = user.amount.sub(_amount);\\n        uint256 _amountToSend = _amount;\\n        if (block.timestamp < (user.firstDeposit + lockUpDuration)) {\\n            uint256 _feeAmountToSend = _amountToSend.mul(withdrawFee).div(\\n                10000\\n            );\\n            stakedToken.safeTransfer(address(feeAddress), _feeAmountToSend);\\n            _amountToSend = _amountToSend - _feeAmountToSend;\\n        }\\n        stakedToken.safeTransfer(address(msg.sender), _amountToSend);\\n        user.firstDeposit = user.firstDeposit == 0\\n            ? block.timestamp\\n            : user.firstDeposit;\\n\\n        if (pendingToken1 > 0) {\\n            _safeTokenTransfer(\\n                mapOfRewardTokens[TOKEN1],\\n                msg.sender,\\n                pendingToken1\\n            );\\n        }\\n        if (pendingToken2 > 0) {\\n            _safeTokenTransfer(\\n                mapOfRewardTokens[TOKEN2],\\n                msg.sender,\\n                pendingToken2\\n            );\\n        }\\n\\n        user.rewardDebt1 = user.amount.mul(mapOfAccTokenPerShare[TOKEN1]).div(\\n            mapOfPrecisionFactor[TOKEN1]\\n        );\\n        user.rewardDebt2 = user.amount.mul(mapOfAccTokenPerShare[TOKEN2]).div(\\n            mapOfPrecisionFactor[TOKEN2]\\n        );\\n\\n        emit Withdraw(msg.sender, _amount);\\n    }\\n\\n    /*\\n     * @notice Claim reward tokens\\n     */\\n    function claim() external nonReentrant {\\n        UserInfo storage user = userInfo[msg.sender];\\n\\n        _updatePool();\\n\\n        if (user.amount > 0) {\\n            uint256 pendingToken1 = user\\n                .amount\\n                .mul(mapOfAccTokenPerShare[TOKEN1])\\n                .div(mapOfPrecisionFactor[TOKEN1])\\n                .sub(user.rewardDebt1);\\n\\n            if (pendingToken1 > 0) {\\n                _safeTokenTransfer(\\n                    mapOfRewardTokens[TOKEN1],\\n                    msg.sender,\\n                    pendingToken1\\n                );\\n                emit Claim(msg.sender, pendingToken1);\\n            }\\n            uint256 pendingToken2 = user\\n                .amount\\n                .mul(mapOfAccTokenPerShare[TOKEN2])\\n                .div(mapOfPrecisionFactor[TOKEN2])\\n                .sub(user.rewardDebt2);\\n\\n            if (pendingToken2 > 0) {\\n                _safeTokenTransfer(\\n                    mapOfRewardTokens[TOKEN2],\\n                    msg.sender,\\n                    pendingToken2\\n                );\\n                emit Claim(msg.sender, pendingToken2);\\n            }\\n        }\\n\\n        user.rewardDebt1 = user.amount.mul(mapOfAccTokenPerShare[TOKEN1]).div(\\n            mapOfPrecisionFactor[TOKEN1]\\n        );\\n\\n        user.rewardDebt2 = user.amount.mul(mapOfAccTokenPerShare[TOKEN2]).div(\\n            mapOfPrecisionFactor[TOKEN2]\\n        );\\n    }\\n\\n    /*\\n     * @notice Withdraw staked tokens without caring about rewards\\n     * @dev Needs to be for emergency.\\n     */\\n    function emergencyWithdraw() external nonReentrant {\\n        UserInfo storage user = userInfo[msg.sender];\\n        uint256 _amountToTransfer = user.amount;\\n        user.amount = 0;\\n        user.rewardDebt1 = 0;\\n        user.rewardDebt2 = 0;\\n\\n        // Avoid users send an amount with 0 tokens\\n        if (_amountToTransfer > 0) {\\n            if (block.timestamp < (user.firstDeposit + lockUpDuration)) {\\n                uint256 _feeAmountToSend = _amountToTransfer\\n                    .mul(withdrawFee)\\n                    .div(10000);\\n                stakedToken.safeTransfer(address(feeAddress), _feeAmountToSend);\\n                _amountToTransfer = _amountToTransfer - _feeAmountToSend;\\n            }\\n            stakedToken.safeTransfer(address(msg.sender), _amountToTransfer);\\n        }\\n\\n        emit EmergencyWithdraw(msg.sender, _amountToTransfer);\\n    }\\n\\n    /**\\n     * @notice It allows the admin to recover wrong tokens sent to the contract\\n     * @param _tokenAddress: the address of the token to withdraw\\n     * @param _tokenAmount: the number of tokens to withdraw\\n     * @dev This function is only callable by admin.\\n     */\\n    function recoverWrongTokens(address _tokenAddress, uint256 _tokenAmount)\\n        external\\n        onlyOwner\\n    {\\n        require(\\n            _tokenAddress != address(stakedToken),\\n            \\\"Cannot be staked token\\\"\\n        );\\n        require(\\n            _tokenAddress != mapOfRewardTokens[TOKEN1] &&\\n                _tokenAddress != mapOfRewardTokens[TOKEN2],\\n            \\\"Cannot be reward token\\\"\\n        );\\n\\n        IERC20Upgradeable(_tokenAddress).safeTransfer(\\n            address(msg.sender),\\n            _tokenAmount\\n        );\\n\\n        emit AdminTokenRecovery(_tokenAddress, _tokenAmount);\\n    }\\n\\n    /*\\n     * @notice Stop rewards\\n     * @dev Only callable by owner\\n     */\\n    function stopReward() external onlyOwner {\\n        endBlock = block.number;\\n    }\\n\\n    /*\\n     * @notice Update reward per block\\n     * @dev Only callable by owner.\\n     * @param _rewardPerBlock: the reward per block\\n     */\\n    function updateRewardPerBlock(uint8 _rewardTokenId, uint256 _rewardPerBlock)\\n        external\\n        onlyOwner\\n    {\\n        require(block.number < startBlock, \\\"Pool has started\\\");\\n        mapOfRewardPerBlock[_rewardTokenId] = _rewardPerBlock;\\n        emit NewRewardPerBlock(_rewardPerBlock);\\n    }\\n\\n    /**\\n     * @notice It allows the admin to update start and end blocks\\n     * @dev This function is only callable by owner.\\n     * @param _startBlock: the new start block\\n     * @param _bonusEndBlock: the new end block\\n     */\\n    function updateStartAndEndBlocks(\\n        uint256 _startBlock,\\n        uint256 _bonusEndBlock\\n    ) external onlyOwner {\\n        require(block.number < startBlock, \\\"Pool has started\\\");\\n        require(\\n            _startBlock < _bonusEndBlock,\\n            \\\"New startBlock must be lower than new endBlock\\\"\\n        );\\n        require(\\n            block.number < _startBlock,\\n            \\\"New startBlock must be higher than current block\\\"\\n        );\\n\\n        startBlock = _startBlock;\\n        endBlock = _bonusEndBlock;\\n\\n        // Set the lastRewardBlock as the startBlock\\n        lastUpdateBlock = startBlock;\\n\\n        emit NewStartAndEndBlocks(_startBlock, _bonusEndBlock);\\n    }\\n\\n    /*\\n     * @notice Sets the lock up duration\\n     * @param _lockUpDuration: The lock up duration in seconds (block timestamp)\\n     * @dev This function is only callable by owner.\\n     */\\n    function setLockUpDuration(uint256 _lockUpDuration) external onlyOwner {\\n        lockUpDuration = _lockUpDuration;\\n        emit NewLockUpDuration(lockUpDuration);\\n    }\\n\\n    /*\\n     * @notice Sets start block of the pool given a block amount\\n     * @param _blocks: block amount\\n     * @dev This function is only callable by owner.\\n     */\\n    function poolStartIn(uint256 _blocks) external onlyOwner {\\n        poolSetStart(block.number.add(_blocks));\\n    }\\n\\n    /*\\n     * @notice Set the duration and start block of the pool\\n     * @param _startBlock: start block\\n     * @param _durationBlocks: duration block amount\\n     * @dev This function is only callable by owner.\\n     */\\n    function poolSetStartAndDuration(\\n        uint256 _startBlock,\\n        uint256 _durationBlocks\\n    ) external onlyOwner {\\n        poolSetStart(_startBlock);\\n        poolSetDuration(_durationBlocks);\\n    }\\n\\n    /*\\n     * @notice Withdraws the remaining funds\\n     * @param _to The address where the funds will be sent\\n     */\\n    function withdrawRemains(uint8 _rewardTokenId, address _to)\\n        external\\n        onlyOwner\\n    {\\n        require(block.number > endBlock, \\\"Error: Pool not finished yet\\\");\\n        uint256 tokenBal = IERC20Upgradeable(mapOfRewardTokens[_rewardTokenId])\\n            .balanceOf(address(this));\\n        require(tokenBal > 0, \\\"Error: No remaining funds\\\");\\n        IERC20Upgradeable(mapOfRewardTokens[_rewardTokenId]).safeTransfer(\\n            _to,\\n            tokenBal\\n        );\\n    }\\n\\n    /*\\n     * @notice Deposits the reward token1 funds\\n     * @param _to The address where the funds will be sent\\n     */\\n    function depositRewardTokenFunds(uint8 _rewardTokenId, uint256 _amount)\\n        external\\n        onlyOwner\\n    {\\n        IERC20Upgradeable(mapOfRewardTokens[_rewardTokenId]).safeTransfer(\\n            address(this),\\n            _amount\\n        );\\n    }\\n\\n    /*\\n     * @notice Gets the reward per block for UI\\n     * @return reward per block\\n     */\\n    function rewarPerBlockUI(uint8 _rewardTokenId)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return\\n            mapOfRewardPerBlock[_rewardTokenId].div(\\n                10**uint256(mapOfRewardTokenDecimals[_rewardTokenId])\\n            );\\n    }\\n\\n    /*\\n     * @notice View function to see pending reward on frontend.\\n     * @param _user: user address\\n     * @return Pending reward for a given user\\n     */\\n    function pendingReward(uint8 _rewardTokenId, address _user)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        UserInfo storage user = userInfo[_user];\\n        uint256 rewardDebt = _rewardTokenId == TOKEN1\\n            ? user.rewardDebt1\\n            : user.rewardDebt2;\\n        uint256 stakedTokenSupply = stakedToken.balanceOf(address(this));\\n        if (block.number > lastUpdateBlock && stakedTokenSupply != 0) {\\n            uint256 multiplier = _getMultiplier(lastUpdateBlock, block.number);\\n            uint256 tokenReward = multiplier.mul(\\n                mapOfRewardPerBlock[_rewardTokenId]\\n            );\\n            uint256 adjustedPerShare = mapOfAccTokenPerShare[_rewardTokenId]\\n                .add(\\n                    tokenReward.mul(mapOfPrecisionFactor[_rewardTokenId]).div(\\n                        stakedTokenSupply\\n                    )\\n                );\\n            return\\n                user\\n                    .amount\\n                    .mul(adjustedPerShare)\\n                    .div(mapOfPrecisionFactor[_rewardTokenId])\\n                    .sub(rewardDebt);\\n        } else {\\n            return\\n                user\\n                    .amount\\n                    .mul(mapOfAccTokenPerShare[_rewardTokenId])\\n                    .div(mapOfPrecisionFactor[_rewardTokenId])\\n                    .sub(rewardDebt);\\n        }\\n    }\\n\\n    /*\\n     * @notice Sets start block of the pool\\n     * @param _startBlock: start block\\n     * @dev This function is only callable by owner.\\n     */\\n    function poolSetStart(uint256 _startBlock) public onlyOwner {\\n        require(block.number < startBlock, \\\"Pool has started\\\");\\n        uint256 rewardDurationValue = rewardDuration();\\n        startBlock = _startBlock;\\n        endBlock = startBlock.add(rewardDurationValue);\\n        lastUpdateBlock = startBlock;\\n        emit NewStartAndEndBlocks(startBlock, endBlock);\\n    }\\n\\n    /*\\n     * @notice Set the duration of the pool\\n     * @param _durationBlocks: duration block amount\\n     * @dev This function is only callable by owner.\\n     */\\n    function poolSetDuration(uint256 _durationBlocks) public onlyOwner {\\n        require(block.number < startBlock, \\\"Pool has started\\\");\\n        endBlock = startBlock.add(_durationBlocks);\\n        poolCalcRewardPerBlock(TOKEN1);\\n        poolCalcRewardPerBlock(TOKEN2);\\n        emit NewEndBlock(endBlock);\\n    }\\n\\n    /*\\n     * @notice Calculates the rewardPerBlock of the pool\\n     * @dev This function is only callable by owner.\\n     */\\n    function poolCalcRewardPerBlock(uint8 _rewardTokenId) public onlyOwner {\\n        uint256 rewardBal = IERC20Upgradeable(mapOfRewardTokens[_rewardTokenId])\\n            .balanceOf(address(this));\\n        mapOfRewardPerBlock[_rewardTokenId] = rewardBal.div(rewardDuration());\\n    }\\n\\n    /*\\n     * @notice Gets the reward duration\\n     * @return reward duration\\n     */\\n    function rewardDuration() public view returns (uint256) {\\n        return endBlock.sub(startBlock);\\n    }\\n\\n    /*\\n     * @notice SendPending tokens to claimer\\n     * @param pending: amount to claim\\n     */\\n    function _safeTokenTransfer(\\n        address _rewardToken,\\n        address _to,\\n        uint256 _amount\\n    ) internal {\\n        uint256 rewardTokenBalance = IERC20Upgradeable(_rewardToken).balanceOf(\\n            address(this)\\n        );\\n        if (_amount > rewardTokenBalance) {\\n            IERC20Upgradeable(_rewardToken).safeTransfer(\\n                _to,\\n                rewardTokenBalance\\n            );\\n        } else {\\n            IERC20Upgradeable(_rewardToken).safeTransfer(_to, _amount);\\n        }\\n    }\\n\\n    /*\\n     * @notice Update reward variables of the given pool to be up-to-date.\\n     */\\n    function _updatePool() internal {\\n        if (block.number <= lastUpdateBlock) {\\n            return;\\n        }\\n\\n        uint256 stakedTokenSupply = stakedToken.balanceOf(address(this));\\n\\n        if (stakedTokenSupply == 0) {\\n            lastUpdateBlock = block.number;\\n            return;\\n        }\\n\\n        uint256 multiplier = _getMultiplier(lastUpdateBlock, block.number);\\n        uint256 tokenReward1 = multiplier.mul(mapOfRewardPerBlock[TOKEN1]);\\n        uint256 tokenReward2 = multiplier.mul(mapOfRewardPerBlock[TOKEN2]);\\n        mapOfAccTokenPerShare[TOKEN1] = mapOfAccTokenPerShare[TOKEN1].add(\\n            tokenReward1.mul(mapOfPrecisionFactor[TOKEN1]).div(\\n                stakedTokenSupply\\n            )\\n        );\\n        mapOfAccTokenPerShare[TOKEN2] = mapOfAccTokenPerShare[TOKEN2].add(\\n            tokenReward2.mul(mapOfPrecisionFactor[TOKEN2]).div(\\n                stakedTokenSupply\\n            )\\n        );\\n        lastUpdateBlock = block.number;\\n    }\\n\\n    /*\\n     * @notice Return reward multiplier over the given _from to _to block.\\n     * @param _from: block to start\\n     * @param _to: block to finish\\n     * @return multiplier\\n     */\\n    function _getMultiplier(uint256 _from, uint256 _to)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        if (_to <= endBlock) {\\n            return _to.sub(_from);\\n        } else if (_from >= endBlock) {\\n            return 0;\\n        } else {\\n            return endBlock.sub(_from);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x27a820c95dfd1095e37027efb5b77c5bd49441007636d80ed6f7e12675aad978\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50600054610100900460ff166200002f5760005460ff161562000039565b62000039620000de565b620000a15760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840160405180910390fd5b600054610100900460ff16158015620000c4576000805461ffff19166101011790555b8015620000d7576000805461ff00191690555b506200010b565b6000620000f630620000fc60201b62001e1f1760201c565b15905090565b6001600160a01b03163b151590565b612a9f806200011b6000396000f3fe608060405234801561001057600080fd5b50600436106102325760003560e01c806383d1c65b11610130578063bfe5f541116100b8578063e1b2addc1161007c578063e1b2addc14610522578063e941fa7814610535578063ea6eef491461053e578063f2fde38b14610551578063f520e7e51461056457600080fd5b8063bfe5f541146104ce578063c9b5b29d146104e1578063cc7a262e146104f4578063d3a8615c14610507578063db2e21bc1461051a57600080fd5b8063a218141b116100ff578063a218141b1461046c578063af1664d114610475578063b3f02d3814610495578063b6b55f25146104a8578063be615335146104bb57600080fd5b806383d1c65b146104225780638da5cb5b146104355780639513997f146104465780639b4f91931461045957600080fd5b806348cd4cb1116101be57806363664dc71161018257806363664dc7146103d65780636aa662b5146103f6578063715018a6146103ff5780637bfaa40c1461040757806380dc06721461041a57600080fd5b806348cd4cb1146103675780634e71d92d14610370578063522b3401146103785780635d80ca32146103985780635fed9b13146103a157600080fd5b806327e644fe1161020557806327e644fe146102d05780632e1a7d4d14610311578063392e53cd146103245780633f138d4b14610341578063412753581461035457600080fd5b8063083c6323146102375780630f7064eb1461025357806310f8097b146102685780631959a0021461027b575b600080fd5b61024060985481565b6040519081526020015b60405180910390f35b61026661026136600461269d565b61056c565b005b6102666102763660046125dc565b6105ca565b6102b06102893660046124e7565b60a56020526000908152604090208054600182015460028301546003909301549192909184565b60408051948552602085019390935291830152606082015260800161024a565b6102f96102de36600461262d565b60a4602052600090815260409020546001600160a01b031681565b6040516001600160a01b03909116815260200161024a565b61026661031f3660046125dc565b610604565b6097546103319060ff1681565b604051901515815260200161024a565b61026661034f366004612503565b610945565b609e546102f9906001600160a01b031681565b61024060995481565b610266610ac0565b61024061038636600461262d565b60a16020526000908152604090205481565b610240609c5481565b6103c46103af36600461262d565b60a36020526000908152604090205460ff1681565b60405160ff909116815260200161024a565b6102406103e436600461262d565b60a06020526000908152604090205481565b610240609b5481565b610266610cf5565b6102666104153660046125dc565b610d2b565b610266610dd8565b61026661043036600461262d565b610e08565b6033546001600160a01b03166102f9565b61026661045436600461260c565b610eeb565b61026661046736600461269d565b611049565b610240609a5481565b61024061048336600461262d565b60a26020526000908152604090205481565b6102666104a33660046125dc565b6110db565b6102666104b63660046125dc565b611184565b6102406104c9366004612665565b611423565b6102666104dc366004612665565b6115dd565b6102406104ef36600461262d565b611761565b609f546102f9906001600160a01b031681565b61026661051536600461260c565b6117a0565b6102666117dc565b6102666105303660046125dc565b6118dc565b610240609d5481565b61026661054c36600461254e565b61193b565b61026661055f3660046124e7565b611d69565b610240611e01565b6033546001600160a01b0316331461059f5760405162461bcd60e51b815260040161059690612733565b60405180910390fd5b60ff8216600090815260a460205260409020546105c6906001600160a01b03163083611e2e565b5050565b6033546001600160a01b031633146105f45760405162461bcd60e51b815260040161059690612733565b6106016104a34383611e91565b50565b600260655414156106275760405162461bcd60e51b8152600401610596906127b3565b6002606555806106715760405162461bcd60e51b8152602060048201526015602482015274115c9c9bdc8e88125b9d985b1a5908185b5bdd5b9d605a1b6044820152606401610596565b33600090815260a56020526040902080548211156106d15760405162461bcd60e51b815260206004820152601b60248201527f416d6f756e7420746f20776974686472617720746f6f206869676800000000006044820152606401610596565b6106d9611ea4565b60018082015460009182526000805160206129ea8339815191525460a0602052600080516020612a4a83398151915254845461072b939261072592909161071f91612096565b906120a2565b906120ae565b6002808401546000918252600080516020612a0a8339815191525460a0602052600080516020612a2a833981519152548654949550929361077493610725929161071f91612096565b835490915061078390856120ae565b8355609b5460038401548591610798916127ea565b4210156107ea5760006107bc61271061071f609d548561209690919063ffffffff16565b609e54609f549192506107dc916001600160a01b03908116911683611e2e565b6107e6818361292c565b9150505b609f54610801906001600160a01b03163383611e2e565b600384015415610815578360030154610817565b425b6003850155821561085057600160005260a46020526000805160206129ca83398151915254610850906001600160a01b031633856120ba565b811561088457600260005260a46020526000805160206129aa83398151915254610884906001600160a01b031633846120ba565b60016000526000805160206129ea8339815191525460a0602052600080516020612a4a8339815191525485546108bf929161071f9190612096565b60018501556002600052600080516020612a0a8339815191525460a0602052600080516020612a2a8339815191525485546108ff929161071f9190612096565b600285015560405185815233907f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a94243649060200160405180910390a250506001606555505050565b6033546001600160a01b0316331461096f5760405162461bcd60e51b815260040161059690612733565b609f546001600160a01b03838116911614156109c65760405162461bcd60e51b815260206004820152601660248201527521b0b73737ba1031329039ba30b5b2b2103a37b5b2b760511b6044820152606401610596565b600160005260a46020526000805160206129ca833981519152546001600160a01b03838116911614801590610a205750600260005260a46020526000805160206129aa833981519152546001600160a01b03838116911614155b610a655760405162461bcd60e51b815260206004820152601660248201527521b0b73737ba103132903932bbb0b932103a37b5b2b760511b6044820152606401610596565b610a796001600160a01b0383163383611e2e565b604080516001600160a01b0384168152602081018390527f74545154aac348a3eac92596bd1971957ca94795f4e954ec5f613b55fab7812991015b60405180910390a15050565b60026065541415610ae35760405162461bcd60e51b8152600401610596906127b3565b600260655533600090815260a560205260409020610aff611ea4565b805415610c6d5760018082015460009182526000805160206129ea8339815191525460a0602052600080516020612a4a833981519152548454610b4c939261072592909161071f91612096565b90508015610bb857600160005260a46020526000805160206129ca83398151915254610b82906001600160a01b031633836120ba565b60405181815233907f47cee97cb7acd717b3c0aa1435d004cd5b3c8c57d70dbceb4e4458bbd60e39d49060200160405180910390a25b6002808301546000918252600080516020612a0a8339815191525460a0602052600080516020612a2a833981519152548554610bfe939261072592909161071f91612096565b90508015610c6a57600260005260a46020526000805160206129aa83398151915254610c34906001600160a01b031633836120ba565b60405181815233907f47cee97cb7acd717b3c0aa1435d004cd5b3c8c57d70dbceb4e4458bbd60e39d49060200160405180910390a25b50505b60016000526000805160206129ea8339815191525460a0602052600080516020612a4a833981519152548254610ca8929161071f9190612096565b60018201556002600052600080516020612a0a8339815191525460a0602052600080516020612a2a833981519152548254610ce8929161071f9190612096565b6002909101556001606555565b6033546001600160a01b03163314610d1f5760405162461bcd60e51b815260040161059690612733565b610d296000612171565b565b6033546001600160a01b03163314610d555760405162461bcd60e51b815260040161059690612733565b6099544310610d765760405162461bcd60e51b815260040161059690612709565b609954610d839082611e91565b609855610d906001610e08565b610d9a6002610e08565b7f55baa248360bce74a89304071ca6e882f61d2226c15dde53a4ec1e05af523d92609854604051610dcd91815260200190565b60405180910390a150565b6033546001600160a01b03163314610e025760405162461bcd60e51b815260040161059690612733565b43609855565b6033546001600160a01b03163314610e325760405162461bcd60e51b815260040161059690612733565b60ff8116600090815260a460205260408082205490516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b158015610e8557600080fd5b505afa158015610e99573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ebd91906125f4565b9050610ed1610eca611e01565b82906120a2565b60ff909216600090815260a1602052604090209190915550565b6033546001600160a01b03163314610f155760405162461bcd60e51b815260040161059690612733565b6099544310610f365760405162461bcd60e51b815260040161059690612709565b808210610f9c5760405162461bcd60e51b815260206004820152602e60248201527f4e6577207374617274426c6f636b206d757374206265206c6f7765722074686160448201526d6e206e657720656e64426c6f636b60901b6064820152608401610596565b8143106110045760405162461bcd60e51b815260206004820152603060248201527f4e6577207374617274426c6f636b206d7573742062652068696768657220746860448201526f616e2063757272656e7420626c6f636b60801b6064820152608401610596565b60998290556098819055609a82905560408051838152602081018390527f7cd0ab87d19036f3dfadadb232c78aa4879dda3f0c994a9d637532410ee2ce069101610ab4565b6033546001600160a01b031633146110735760405162461bcd60e51b815260040161059690612733565b60995443106110945760405162461bcd60e51b815260040161059690612709565b60ff8216600090815260a1602052604090819020829055517f0c4d677eef92893ac7ec52faf8140fc6c851ab4736302b4f3a89dfb20696a0df90610ab49083815260200190565b6033546001600160a01b031633146111055760405162461bcd60e51b815260040161059690612733565b60995443106111265760405162461bcd60e51b815260040161059690612709565b6000611130611e01565b609983905590506111418282611e91565b6098819055609954609a8190556040517f7cd0ab87d19036f3dfadadb232c78aa4879dda3f0c994a9d637532410ee2ce0692610ab4928252602082015260400190565b600260655414156111a75760405162461bcd60e51b8152600401610596906127b3565b600260655533600090815260a560205260409020609c5481546111cb9084906127ea565b11156112125760405162461bcd60e51b815260206004820152601660248201527519195c1bdcda5d0e881b1a5b5a5d081c995858da195960521b6044820152606401610596565b61121a611ea4565b80541561131c5760018082015460009182526000805160206129ea8339815191525460a0602052600080516020612a4a833981519152548454611267939261072592909161071f91612096565b9050801561129d57600160005260a46020526000805160206129ca8339815191525461129d906001600160a01b031633836120ba565b6002808301546000918252600080516020612a0a8339815191525460a0602052600080516020612a2a8339815191525485546112e3939261072592909161071f91612096565b9050801561131957600260005260a46020526000805160206129aa83398151915254611319906001600160a01b031633836120ba565b50505b811561136457805461132e9083611e91565b8155609f54611348906001600160a01b03163330856121c3565b60038101541561135c57806003015461135e565b425b60038201555b60016000526000805160206129ea8339815191525460a0602052600080516020612a4a83398151915254825461139f929161071f9190612096565b60018201556002600052600080516020612a0a8339815191525460a0602052600080516020612a2a8339815191525482546113df929161071f9190612096565b600282015560405182815233907fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c906020015b60405180910390a250506001606555565b6001600160a01b038116600090815260a5602052604081208160ff8516600114611451578160020154611457565b81600101545b609f546040516370a0823160e01b81523060048201529192506000916001600160a01b03909116906370a082319060240160206040518083038186803b1580156114a057600080fd5b505afa1580156114b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114d891906125f4565b9050609a54431180156114ea57508015155b1561159d5760006114fd609a54436121fb565b60ff8816600090815260a160205260408120549192509061151f908390612096565b60ff8916600090815260a26020526040812054919250906115649061154b90869061071f908690612096565b60ff8b16600090815260a0602052604090205490611e91565b60ff8a16600090815260a2602052604090205487549192506115909187916107259161071f9086612096565b96505050505050506115d7565b60ff8616600090815260a2602090815260408083205460a09092529091205484546115d19285926107259261071f91612096565b93505050505b92915050565b6033546001600160a01b031633146116075760405162461bcd60e51b815260040161059690612733565b60985443116116585760405162461bcd60e51b815260206004820152601c60248201527f4572726f723a20506f6f6c206e6f742066696e697368656420796574000000006044820152606401610596565b60ff8216600090815260a460205260408082205490516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b1580156116ab57600080fd5b505afa1580156116bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116e391906125f4565b9050600081116117355760405162461bcd60e51b815260206004820152601960248201527f4572726f723a204e6f2072656d61696e696e672066756e6473000000000000006044820152606401610596565b60ff8316600090815260a4602052604090205461175c906001600160a01b03168383611e2e565b505050565b60ff808216600090815260a3602052604081205490916115d7916117879116600a612865565b60ff8416600090815260a16020526040902054906120a2565b6033546001600160a01b031633146117ca5760405162461bcd60e51b815260040161059690612733565b6117d3826110db565b6105c681610d2b565b600260655414156117ff5760405162461bcd60e51b8152600401610596906127b3565b6002606581905533600090815260a560205260408120805482825560018201839055928101919091559080156118aa57609b54826003015461184191906127ea565b42101561189357600061186561271061071f609d548561209690919063ffffffff16565b609e54609f54919250611885916001600160a01b03908116911683611e2e565b61188f818361292c565b9150505b609f546118aa906001600160a01b03163383611e2e565b60405181815233907f5fafa99d0643513820be26656b45130b01e1c03062e1266bf36f88cbd3bd969590602001611412565b6033546001600160a01b031633146119065760405162461bcd60e51b815260040161059690612733565b609b8190556040518181527fd2a4f919593bfa0565c404bb5e42080750d07eedb9dfa9907c22be9e29c02a9890602001610dcd565b600054610100900460ff166119565760005460ff161561195a565b303b155b6119bd5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610596565b600054610100900460ff161580156119df576000805461ffff19166101011790555b6119e7612235565b609f80546001600160a01b03808d166001600160a01b03199283161790925560a460209081526000805160206129ca83398151915280548d851690841681179091556000805160206129aa83398151915280548d861690851617905560998b905560988a9055609b899055609d889055609e80549488169490931693909317909155609c84905560016000526040805163313ce56760e01b8152905163313ce56792600483810193919291829003018186803b158015611aa657600080fd5b505afa158015611aba573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ade9190612649565b7fc3869149e653ab70ab3abed8edc49ed99ccd0c8cf7ca81486b7adbd034773b10805460ff191660ff92909216919091179055600260005260a460209081526000805160206129aa833981519152546040805163313ce56760e01b815290516001600160a01b039092169263313ce56792600480840193829003018186803b158015611b6957600080fd5b505afa158015611b7d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ba19190612649565b60a36020527fe262b42e4ca35e2f1e405b90c91327b65c89bdbf5dd51dedc3459002050f6b7b805460ff191660ff92831617905560016000527fc3869149e653ab70ab3abed8edc49ed99ccd0c8cf7ca81486b7adbd034773b1054601e9116108015611c3d5750600260005260a36020527fe262b42e4ca35e2f1e405b90c91327b65c89bdbf5dd51dedc3459002050f6b7b54601e60ff909116105b611c825760405162461bcd60e51b815260206004820152601660248201527504d75737420626520696e666572696f7220746f2033360541b6044820152606401610596565b600160005260a36020527fc3869149e653ab70ab3abed8edc49ed99ccd0c8cf7ca81486b7adbd034773b1054611cbd90601e9060ff166120ae565b611cc890600a612865565b6000805160206129ea83398151915255600260005260a36020527fe262b42e4ca35e2f1e405b90c91327b65c89bdbf5dd51dedc3459002050f6b7b54611d1390601e9060ff166120ae565b611d1e90600a612865565b600260005260a2602052600080516020612a0a83398151915255609954609a556097805460ff191660011790558015611d5d576000805461ff00191690555b50505050505050505050565b6033546001600160a01b03163314611d935760405162461bcd60e51b815260040161059690612733565b6001600160a01b038116611df85760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610596565b61060181612171565b6000611e1a6099546098546120ae90919063ffffffff16565b905090565b6001600160a01b03163b151590565b6040516001600160a01b03831660248201526044810182905261175c90849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152612264565b6000611e9d82846127ea565b9392505050565b609a544311611eaf57565b609f546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b158015611ef357600080fd5b505afa158015611f07573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f2b91906125f4565b905080611f39575043609a55565b6000611f47609a54436121fb565b6001600090815260a16020527ff4875fff8b0cf986238a93aa5a1c4dd6cdbe2f1045b9974e1f43ef715569af665491925090611f84908390612096565b6002600090815260a16020527f56cd10bd7c5a283404157adf2ba847ac6f7bfee0953fbdea6cae6f66ee17d9ce5491925090611fc1908490612096565b600160005260a26020526000805160206129ea8339815191525490915061201390611ff390869061071f908690612096565b600160005260a0602052600080516020612a4a8339815191525490611e91565b600080516020612a4a83398151915255600260005260a2602052600080516020612a0a833981519152546120729061205290869061071f908590612096565b600260005260a0602052600080516020612a2a8339815191525490611e91565b600260005260a0602052600080516020612a2a83398151915255505043609a555050565b6000611e9d828461290d565b6000611e9d8284612802565b6000611e9d828461292c565b6040516370a0823160e01b81523060048201526000906001600160a01b038516906370a082319060240160206040518083038186803b1580156120fc57600080fd5b505afa158015612110573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061213491906125f4565b905080821115612157576121526001600160a01b0385168483611e2e565b61216b565b61216b6001600160a01b0385168484611e2e565b50505050565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6040516001600160a01b038085166024830152831660448201526064810182905261216b9085906323b872dd60e01b90608401611e5a565b600060985482116122175761221082846120ae565b90506115d7565b6098548310612228575060006115d7565b60985461221090846120ae565b600054610100900460ff1661225c5760405162461bcd60e51b815260040161059690612768565b610d29612336565b60006122b9826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166123669092919063ffffffff16565b80519091501561175c57808060200190518101906122d7919061252e565b61175c5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610596565b600054610100900460ff1661235d5760405162461bcd60e51b815260040161059690612768565b610d2933612171565b6060612375848460008561237d565b949350505050565b6060824710156123de5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610596565b6001600160a01b0385163b6124355760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610596565b600080866001600160a01b0316858760405161245191906126ba565b60006040518083038185875af1925050503d806000811461248e576040519150601f19603f3d011682016040523d82523d6000602084013e612493565b606091505b50915091506124a38282866124ae565b979650505050505050565b606083156124bd575081611e9d565b8251156124cd5782518084602001fd5b8160405162461bcd60e51b815260040161059691906126d6565b6000602082840312156124f8578081fd5b8135611e9d81612985565b60008060408385031215612515578081fd5b823561252081612985565b946020939093013593505050565b60006020828403121561253f578081fd5b81518015158114611e9d578182fd5b60008060008060008060008060006101208a8c03121561256c578485fd5b893561257781612985565b985060208a013561258781612985565b975060408a013561259781612985565b965060608a0135955060808a0135945060a08a0135935060c08a0135925060e08a01356125c381612985565b809250506101008a013590509295985092959850929598565b6000602082840312156125ed578081fd5b5035919050565b600060208284031215612605578081fd5b5051919050565b6000806040838503121561261e578182fd5b50508035926020909101359150565b60006020828403121561263e578081fd5b8135611e9d8161299a565b60006020828403121561265a578081fd5b8151611e9d8161299a565b60008060408385031215612677578182fd5b82356126828161299a565b9150602083013561269281612985565b809150509250929050565b600080604083850312156126af578182fd5b82356125208161299a565b600082516126cc818460208701612943565b9190910192915050565b60208152600082518060208401526126f5816040850160208701612943565b601f01601f19169190910160400192915050565b60208082526010908201526f141bdbdb081a185cc81cdd185c9d195960821b604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b600082198211156127fd576127fd61296f565b500190565b60008261281d57634e487b7160e01b81526012600452602481fd5b500490565b600181815b8085111561285d5781600019048211156128435761284361296f565b8085161561285057918102915b93841c9390800290612827565b509250929050565b6000611e9d838360008261287b575060016115d7565b81612888575060006115d7565b816001811461289e57600281146128a8576128c4565b60019150506115d7565b60ff8411156128b9576128b961296f565b50506001821b6115d7565b5060208310610133831016604e8410600b84101617156128e7575081810a6115d7565b6128f18383612822565b80600019048211156129055761290561296f565b029392505050565b60008160001904831182151516156129275761292761296f565b500290565b60008282101561293e5761293e61296f565b500390565b60005b8381101561295e578181015183820152602001612946565b8381111561216b5750506000910152565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b038116811461060157600080fd5b60ff8116811461060157600080fdfe23a5aa70edc02ebf6b3ef7000e0b542350f98d01371c37edf6974a1bc30d32ff3ab5dcf47126747c0704cb686c5b362a3f19c34c1a7f9e61bd557bb2aac5bcac87286cc7b9cf8a377e677776b2644ce858185998d33108f493bdc3c2f07b9836984fb507cc15174c9c2666d8998832bf192b808658c1b8547c17c86e40ea5814003e94880a29ff53e6a8208a04e96e212c12922b7bda6b10d8c1979e9844e6785e4aa62fc514c001129aba2f8cfdadfdbf7b1cca3faf4a1fee3af14b1315f0dda264697066735822122076af3c3a75b0f23845d1a4e211000b742714ed0e1ebf633ef59462963b8dc4c864736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102325760003560e01c806383d1c65b11610130578063bfe5f541116100b8578063e1b2addc1161007c578063e1b2addc14610522578063e941fa7814610535578063ea6eef491461053e578063f2fde38b14610551578063f520e7e51461056457600080fd5b8063bfe5f541146104ce578063c9b5b29d146104e1578063cc7a262e146104f4578063d3a8615c14610507578063db2e21bc1461051a57600080fd5b8063a218141b116100ff578063a218141b1461046c578063af1664d114610475578063b3f02d3814610495578063b6b55f25146104a8578063be615335146104bb57600080fd5b806383d1c65b146104225780638da5cb5b146104355780639513997f146104465780639b4f91931461045957600080fd5b806348cd4cb1116101be57806363664dc71161018257806363664dc7146103d65780636aa662b5146103f6578063715018a6146103ff5780637bfaa40c1461040757806380dc06721461041a57600080fd5b806348cd4cb1146103675780634e71d92d14610370578063522b3401146103785780635d80ca32146103985780635fed9b13146103a157600080fd5b806327e644fe1161020557806327e644fe146102d05780632e1a7d4d14610311578063392e53cd146103245780633f138d4b14610341578063412753581461035457600080fd5b8063083c6323146102375780630f7064eb1461025357806310f8097b146102685780631959a0021461027b575b600080fd5b61024060985481565b6040519081526020015b60405180910390f35b61026661026136600461269d565b61056c565b005b6102666102763660046125dc565b6105ca565b6102b06102893660046124e7565b60a56020526000908152604090208054600182015460028301546003909301549192909184565b60408051948552602085019390935291830152606082015260800161024a565b6102f96102de36600461262d565b60a4602052600090815260409020546001600160a01b031681565b6040516001600160a01b03909116815260200161024a565b61026661031f3660046125dc565b610604565b6097546103319060ff1681565b604051901515815260200161024a565b61026661034f366004612503565b610945565b609e546102f9906001600160a01b031681565b61024060995481565b610266610ac0565b61024061038636600461262d565b60a16020526000908152604090205481565b610240609c5481565b6103c46103af36600461262d565b60a36020526000908152604090205460ff1681565b60405160ff909116815260200161024a565b6102406103e436600461262d565b60a06020526000908152604090205481565b610240609b5481565b610266610cf5565b6102666104153660046125dc565b610d2b565b610266610dd8565b61026661043036600461262d565b610e08565b6033546001600160a01b03166102f9565b61026661045436600461260c565b610eeb565b61026661046736600461269d565b611049565b610240609a5481565b61024061048336600461262d565b60a26020526000908152604090205481565b6102666104a33660046125dc565b6110db565b6102666104b63660046125dc565b611184565b6102406104c9366004612665565b611423565b6102666104dc366004612665565b6115dd565b6102406104ef36600461262d565b611761565b609f546102f9906001600160a01b031681565b61026661051536600461260c565b6117a0565b6102666117dc565b6102666105303660046125dc565b6118dc565b610240609d5481565b61026661054c36600461254e565b61193b565b61026661055f3660046124e7565b611d69565b610240611e01565b6033546001600160a01b0316331461059f5760405162461bcd60e51b815260040161059690612733565b60405180910390fd5b60ff8216600090815260a460205260409020546105c6906001600160a01b03163083611e2e565b5050565b6033546001600160a01b031633146105f45760405162461bcd60e51b815260040161059690612733565b6106016104a34383611e91565b50565b600260655414156106275760405162461bcd60e51b8152600401610596906127b3565b6002606555806106715760405162461bcd60e51b8152602060048201526015602482015274115c9c9bdc8e88125b9d985b1a5908185b5bdd5b9d605a1b6044820152606401610596565b33600090815260a56020526040902080548211156106d15760405162461bcd60e51b815260206004820152601b60248201527f416d6f756e7420746f20776974686472617720746f6f206869676800000000006044820152606401610596565b6106d9611ea4565b60018082015460009182526000805160206129ea8339815191525460a0602052600080516020612a4a83398151915254845461072b939261072592909161071f91612096565b906120a2565b906120ae565b6002808401546000918252600080516020612a0a8339815191525460a0602052600080516020612a2a833981519152548654949550929361077493610725929161071f91612096565b835490915061078390856120ae565b8355609b5460038401548591610798916127ea565b4210156107ea5760006107bc61271061071f609d548561209690919063ffffffff16565b609e54609f549192506107dc916001600160a01b03908116911683611e2e565b6107e6818361292c565b9150505b609f54610801906001600160a01b03163383611e2e565b600384015415610815578360030154610817565b425b6003850155821561085057600160005260a46020526000805160206129ca83398151915254610850906001600160a01b031633856120ba565b811561088457600260005260a46020526000805160206129aa83398151915254610884906001600160a01b031633846120ba565b60016000526000805160206129ea8339815191525460a0602052600080516020612a4a8339815191525485546108bf929161071f9190612096565b60018501556002600052600080516020612a0a8339815191525460a0602052600080516020612a2a8339815191525485546108ff929161071f9190612096565b600285015560405185815233907f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a94243649060200160405180910390a250506001606555505050565b6033546001600160a01b0316331461096f5760405162461bcd60e51b815260040161059690612733565b609f546001600160a01b03838116911614156109c65760405162461bcd60e51b815260206004820152601660248201527521b0b73737ba1031329039ba30b5b2b2103a37b5b2b760511b6044820152606401610596565b600160005260a46020526000805160206129ca833981519152546001600160a01b03838116911614801590610a205750600260005260a46020526000805160206129aa833981519152546001600160a01b03838116911614155b610a655760405162461bcd60e51b815260206004820152601660248201527521b0b73737ba103132903932bbb0b932103a37b5b2b760511b6044820152606401610596565b610a796001600160a01b0383163383611e2e565b604080516001600160a01b0384168152602081018390527f74545154aac348a3eac92596bd1971957ca94795f4e954ec5f613b55fab7812991015b60405180910390a15050565b60026065541415610ae35760405162461bcd60e51b8152600401610596906127b3565b600260655533600090815260a560205260409020610aff611ea4565b805415610c6d5760018082015460009182526000805160206129ea8339815191525460a0602052600080516020612a4a833981519152548454610b4c939261072592909161071f91612096565b90508015610bb857600160005260a46020526000805160206129ca83398151915254610b82906001600160a01b031633836120ba565b60405181815233907f47cee97cb7acd717b3c0aa1435d004cd5b3c8c57d70dbceb4e4458bbd60e39d49060200160405180910390a25b6002808301546000918252600080516020612a0a8339815191525460a0602052600080516020612a2a833981519152548554610bfe939261072592909161071f91612096565b90508015610c6a57600260005260a46020526000805160206129aa83398151915254610c34906001600160a01b031633836120ba565b60405181815233907f47cee97cb7acd717b3c0aa1435d004cd5b3c8c57d70dbceb4e4458bbd60e39d49060200160405180910390a25b50505b60016000526000805160206129ea8339815191525460a0602052600080516020612a4a833981519152548254610ca8929161071f9190612096565b60018201556002600052600080516020612a0a8339815191525460a0602052600080516020612a2a833981519152548254610ce8929161071f9190612096565b6002909101556001606555565b6033546001600160a01b03163314610d1f5760405162461bcd60e51b815260040161059690612733565b610d296000612171565b565b6033546001600160a01b03163314610d555760405162461bcd60e51b815260040161059690612733565b6099544310610d765760405162461bcd60e51b815260040161059690612709565b609954610d839082611e91565b609855610d906001610e08565b610d9a6002610e08565b7f55baa248360bce74a89304071ca6e882f61d2226c15dde53a4ec1e05af523d92609854604051610dcd91815260200190565b60405180910390a150565b6033546001600160a01b03163314610e025760405162461bcd60e51b815260040161059690612733565b43609855565b6033546001600160a01b03163314610e325760405162461bcd60e51b815260040161059690612733565b60ff8116600090815260a460205260408082205490516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b158015610e8557600080fd5b505afa158015610e99573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ebd91906125f4565b9050610ed1610eca611e01565b82906120a2565b60ff909216600090815260a1602052604090209190915550565b6033546001600160a01b03163314610f155760405162461bcd60e51b815260040161059690612733565b6099544310610f365760405162461bcd60e51b815260040161059690612709565b808210610f9c5760405162461bcd60e51b815260206004820152602e60248201527f4e6577207374617274426c6f636b206d757374206265206c6f7765722074686160448201526d6e206e657720656e64426c6f636b60901b6064820152608401610596565b8143106110045760405162461bcd60e51b815260206004820152603060248201527f4e6577207374617274426c6f636b206d7573742062652068696768657220746860448201526f616e2063757272656e7420626c6f636b60801b6064820152608401610596565b60998290556098819055609a82905560408051838152602081018390527f7cd0ab87d19036f3dfadadb232c78aa4879dda3f0c994a9d637532410ee2ce069101610ab4565b6033546001600160a01b031633146110735760405162461bcd60e51b815260040161059690612733565b60995443106110945760405162461bcd60e51b815260040161059690612709565b60ff8216600090815260a1602052604090819020829055517f0c4d677eef92893ac7ec52faf8140fc6c851ab4736302b4f3a89dfb20696a0df90610ab49083815260200190565b6033546001600160a01b031633146111055760405162461bcd60e51b815260040161059690612733565b60995443106111265760405162461bcd60e51b815260040161059690612709565b6000611130611e01565b609983905590506111418282611e91565b6098819055609954609a8190556040517f7cd0ab87d19036f3dfadadb232c78aa4879dda3f0c994a9d637532410ee2ce0692610ab4928252602082015260400190565b600260655414156111a75760405162461bcd60e51b8152600401610596906127b3565b600260655533600090815260a560205260409020609c5481546111cb9084906127ea565b11156112125760405162461bcd60e51b815260206004820152601660248201527519195c1bdcda5d0e881b1a5b5a5d081c995858da195960521b6044820152606401610596565b61121a611ea4565b80541561131c5760018082015460009182526000805160206129ea8339815191525460a0602052600080516020612a4a833981519152548454611267939261072592909161071f91612096565b9050801561129d57600160005260a46020526000805160206129ca8339815191525461129d906001600160a01b031633836120ba565b6002808301546000918252600080516020612a0a8339815191525460a0602052600080516020612a2a8339815191525485546112e3939261072592909161071f91612096565b9050801561131957600260005260a46020526000805160206129aa83398151915254611319906001600160a01b031633836120ba565b50505b811561136457805461132e9083611e91565b8155609f54611348906001600160a01b03163330856121c3565b60038101541561135c57806003015461135e565b425b60038201555b60016000526000805160206129ea8339815191525460a0602052600080516020612a4a83398151915254825461139f929161071f9190612096565b60018201556002600052600080516020612a0a8339815191525460a0602052600080516020612a2a8339815191525482546113df929161071f9190612096565b600282015560405182815233907fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c906020015b60405180910390a250506001606555565b6001600160a01b038116600090815260a5602052604081208160ff8516600114611451578160020154611457565b81600101545b609f546040516370a0823160e01b81523060048201529192506000916001600160a01b03909116906370a082319060240160206040518083038186803b1580156114a057600080fd5b505afa1580156114b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114d891906125f4565b9050609a54431180156114ea57508015155b1561159d5760006114fd609a54436121fb565b60ff8816600090815260a160205260408120549192509061151f908390612096565b60ff8916600090815260a26020526040812054919250906115649061154b90869061071f908690612096565b60ff8b16600090815260a0602052604090205490611e91565b60ff8a16600090815260a2602052604090205487549192506115909187916107259161071f9086612096565b96505050505050506115d7565b60ff8616600090815260a2602090815260408083205460a09092529091205484546115d19285926107259261071f91612096565b93505050505b92915050565b6033546001600160a01b031633146116075760405162461bcd60e51b815260040161059690612733565b60985443116116585760405162461bcd60e51b815260206004820152601c60248201527f4572726f723a20506f6f6c206e6f742066696e697368656420796574000000006044820152606401610596565b60ff8216600090815260a460205260408082205490516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b1580156116ab57600080fd5b505afa1580156116bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116e391906125f4565b9050600081116117355760405162461bcd60e51b815260206004820152601960248201527f4572726f723a204e6f2072656d61696e696e672066756e6473000000000000006044820152606401610596565b60ff8316600090815260a4602052604090205461175c906001600160a01b03168383611e2e565b505050565b60ff808216600090815260a3602052604081205490916115d7916117879116600a612865565b60ff8416600090815260a16020526040902054906120a2565b6033546001600160a01b031633146117ca5760405162461bcd60e51b815260040161059690612733565b6117d3826110db565b6105c681610d2b565b600260655414156117ff5760405162461bcd60e51b8152600401610596906127b3565b6002606581905533600090815260a560205260408120805482825560018201839055928101919091559080156118aa57609b54826003015461184191906127ea565b42101561189357600061186561271061071f609d548561209690919063ffffffff16565b609e54609f54919250611885916001600160a01b03908116911683611e2e565b61188f818361292c565b9150505b609f546118aa906001600160a01b03163383611e2e565b60405181815233907f5fafa99d0643513820be26656b45130b01e1c03062e1266bf36f88cbd3bd969590602001611412565b6033546001600160a01b031633146119065760405162461bcd60e51b815260040161059690612733565b609b8190556040518181527fd2a4f919593bfa0565c404bb5e42080750d07eedb9dfa9907c22be9e29c02a9890602001610dcd565b600054610100900460ff166119565760005460ff161561195a565b303b155b6119bd5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610596565b600054610100900460ff161580156119df576000805461ffff19166101011790555b6119e7612235565b609f80546001600160a01b03808d166001600160a01b03199283161790925560a460209081526000805160206129ca83398151915280548d851690841681179091556000805160206129aa83398151915280548d861690851617905560998b905560988a9055609b899055609d889055609e80549488169490931693909317909155609c84905560016000526040805163313ce56760e01b8152905163313ce56792600483810193919291829003018186803b158015611aa657600080fd5b505afa158015611aba573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ade9190612649565b7fc3869149e653ab70ab3abed8edc49ed99ccd0c8cf7ca81486b7adbd034773b10805460ff191660ff92909216919091179055600260005260a460209081526000805160206129aa833981519152546040805163313ce56760e01b815290516001600160a01b039092169263313ce56792600480840193829003018186803b158015611b6957600080fd5b505afa158015611b7d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ba19190612649565b60a36020527fe262b42e4ca35e2f1e405b90c91327b65c89bdbf5dd51dedc3459002050f6b7b805460ff191660ff92831617905560016000527fc3869149e653ab70ab3abed8edc49ed99ccd0c8cf7ca81486b7adbd034773b1054601e9116108015611c3d5750600260005260a36020527fe262b42e4ca35e2f1e405b90c91327b65c89bdbf5dd51dedc3459002050f6b7b54601e60ff909116105b611c825760405162461bcd60e51b815260206004820152601660248201527504d75737420626520696e666572696f7220746f2033360541b6044820152606401610596565b600160005260a36020527fc3869149e653ab70ab3abed8edc49ed99ccd0c8cf7ca81486b7adbd034773b1054611cbd90601e9060ff166120ae565b611cc890600a612865565b6000805160206129ea83398151915255600260005260a36020527fe262b42e4ca35e2f1e405b90c91327b65c89bdbf5dd51dedc3459002050f6b7b54611d1390601e9060ff166120ae565b611d1e90600a612865565b600260005260a2602052600080516020612a0a83398151915255609954609a556097805460ff191660011790558015611d5d576000805461ff00191690555b50505050505050505050565b6033546001600160a01b03163314611d935760405162461bcd60e51b815260040161059690612733565b6001600160a01b038116611df85760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610596565b61060181612171565b6000611e1a6099546098546120ae90919063ffffffff16565b905090565b6001600160a01b03163b151590565b6040516001600160a01b03831660248201526044810182905261175c90849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152612264565b6000611e9d82846127ea565b9392505050565b609a544311611eaf57565b609f546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b158015611ef357600080fd5b505afa158015611f07573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f2b91906125f4565b905080611f39575043609a55565b6000611f47609a54436121fb565b6001600090815260a16020527ff4875fff8b0cf986238a93aa5a1c4dd6cdbe2f1045b9974e1f43ef715569af665491925090611f84908390612096565b6002600090815260a16020527f56cd10bd7c5a283404157adf2ba847ac6f7bfee0953fbdea6cae6f66ee17d9ce5491925090611fc1908490612096565b600160005260a26020526000805160206129ea8339815191525490915061201390611ff390869061071f908690612096565b600160005260a0602052600080516020612a4a8339815191525490611e91565b600080516020612a4a83398151915255600260005260a2602052600080516020612a0a833981519152546120729061205290869061071f908590612096565b600260005260a0602052600080516020612a2a8339815191525490611e91565b600260005260a0602052600080516020612a2a83398151915255505043609a555050565b6000611e9d828461290d565b6000611e9d8284612802565b6000611e9d828461292c565b6040516370a0823160e01b81523060048201526000906001600160a01b038516906370a082319060240160206040518083038186803b1580156120fc57600080fd5b505afa158015612110573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061213491906125f4565b905080821115612157576121526001600160a01b0385168483611e2e565b61216b565b61216b6001600160a01b0385168484611e2e565b50505050565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6040516001600160a01b038085166024830152831660448201526064810182905261216b9085906323b872dd60e01b90608401611e5a565b600060985482116122175761221082846120ae565b90506115d7565b6098548310612228575060006115d7565b60985461221090846120ae565b600054610100900460ff1661225c5760405162461bcd60e51b815260040161059690612768565b610d29612336565b60006122b9826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166123669092919063ffffffff16565b80519091501561175c57808060200190518101906122d7919061252e565b61175c5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610596565b600054610100900460ff1661235d5760405162461bcd60e51b815260040161059690612768565b610d2933612171565b6060612375848460008561237d565b949350505050565b6060824710156123de5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610596565b6001600160a01b0385163b6124355760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610596565b600080866001600160a01b0316858760405161245191906126ba565b60006040518083038185875af1925050503d806000811461248e576040519150601f19603f3d011682016040523d82523d6000602084013e612493565b606091505b50915091506124a38282866124ae565b979650505050505050565b606083156124bd575081611e9d565b8251156124cd5782518084602001fd5b8160405162461bcd60e51b815260040161059691906126d6565b6000602082840312156124f8578081fd5b8135611e9d81612985565b60008060408385031215612515578081fd5b823561252081612985565b946020939093013593505050565b60006020828403121561253f578081fd5b81518015158114611e9d578182fd5b60008060008060008060008060006101208a8c03121561256c578485fd5b893561257781612985565b985060208a013561258781612985565b975060408a013561259781612985565b965060608a0135955060808a0135945060a08a0135935060c08a0135925060e08a01356125c381612985565b809250506101008a013590509295985092959850929598565b6000602082840312156125ed578081fd5b5035919050565b600060208284031215612605578081fd5b5051919050565b6000806040838503121561261e578182fd5b50508035926020909101359150565b60006020828403121561263e578081fd5b8135611e9d8161299a565b60006020828403121561265a578081fd5b8151611e9d8161299a565b60008060408385031215612677578182fd5b82356126828161299a565b9150602083013561269281612985565b809150509250929050565b600080604083850312156126af578182fd5b82356125208161299a565b600082516126cc818460208701612943565b9190910192915050565b60208152600082518060208401526126f5816040850160208701612943565b601f01601f19169190910160400192915050565b60208082526010908201526f141bdbdb081a185cc81cdd185c9d195960821b604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b600082198211156127fd576127fd61296f565b500190565b60008261281d57634e487b7160e01b81526012600452602481fd5b500490565b600181815b8085111561285d5781600019048211156128435761284361296f565b8085161561285057918102915b93841c9390800290612827565b509250929050565b6000611e9d838360008261287b575060016115d7565b81612888575060006115d7565b816001811461289e57600281146128a8576128c4565b60019150506115d7565b60ff8411156128b9576128b961296f565b50506001821b6115d7565b5060208310610133831016604e8410600b84101617156128e7575081810a6115d7565b6128f18383612822565b80600019048211156129055761290561296f565b029392505050565b60008160001904831182151516156129275761292761296f565b500290565b60008282101561293e5761293e61296f565b500390565b60005b8381101561295e578181015183820152602001612946565b8381111561216b5750506000910152565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b038116811461060157600080fd5b60ff8116811461060157600080fdfe23a5aa70edc02ebf6b3ef7000e0b542350f98d01371c37edf6974a1bc30d32ff3ab5dcf47126747c0704cb686c5b362a3f19c34c1a7f9e61bd557bb2aac5bcac87286cc7b9cf8a377e677776b2644ce858185998d33108f493bdc3c2f07b9836984fb507cc15174c9c2666d8998832bf192b808658c1b8547c17c86e40ea5814003e94880a29ff53e6a8208a04e96e212c12922b7bda6b10d8c1979e9844e6785e4aa62fc514c001129aba2f8cfdadfdbf7b1cca3faf4a1fee3af14b1315f0dda264697066735822122076af3c3a75b0f23845d1a4e211000b742714ed0e1ebf633ef59462963b8dc4c864736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "recoverWrongTokens(address,uint256)": {
        "details": "This function is only callable by admin.",
        "params": {
          "_tokenAddress": ": the address of the token to withdraw",
          "_tokenAmount": ": the number of tokens to withdraw"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateStartAndEndBlocks(uint256,uint256)": {
        "details": "This function is only callable by owner.",
        "params": {
          "_bonusEndBlock": ": the new end block",
          "_startBlock": ": the new start block"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "recoverWrongTokens(address,uint256)": {
        "notice": "It allows the admin to recover wrong tokens sent to the contract"
      },
      "updateStartAndEndBlocks(uint256,uint256)": {
        "notice": "It allows the admin to update start and end blocks"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 130,
        "contract": "contracts/GQGalacticAllianceLimited.sol:GQGalacticAllianceLimited",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 133,
        "contract": "contracts/GQGalacticAllianceLimited.sol:GQGalacticAllianceLimited",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 867,
        "contract": "contracts/GQGalacticAllianceLimited.sol:GQGalacticAllianceLimited",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/GQGalacticAllianceLimited.sol:GQGalacticAllianceLimited",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 122,
        "contract": "contracts/GQGalacticAllianceLimited.sol:GQGalacticAllianceLimited",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 211,
        "contract": "contracts/GQGalacticAllianceLimited.sol:GQGalacticAllianceLimited",
        "label": "_status",
        "offset": 0,
        "slot": "101",
        "type": "t_uint256"
      },
      {
        "astId": 255,
        "contract": "contracts/GQGalacticAllianceLimited.sol:GQGalacticAllianceLimited",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 2820,
        "contract": "contracts/GQGalacticAllianceLimited.sol:GQGalacticAllianceLimited",
        "label": "isInitialized",
        "offset": 0,
        "slot": "151",
        "type": "t_bool"
      },
      {
        "astId": 2822,
        "contract": "contracts/GQGalacticAllianceLimited.sol:GQGalacticAllianceLimited",
        "label": "endBlock",
        "offset": 0,
        "slot": "152",
        "type": "t_uint256"
      },
      {
        "astId": 2824,
        "contract": "contracts/GQGalacticAllianceLimited.sol:GQGalacticAllianceLimited",
        "label": "startBlock",
        "offset": 0,
        "slot": "153",
        "type": "t_uint256"
      },
      {
        "astId": 2826,
        "contract": "contracts/GQGalacticAllianceLimited.sol:GQGalacticAllianceLimited",
        "label": "lastUpdateBlock",
        "offset": 0,
        "slot": "154",
        "type": "t_uint256"
      },
      {
        "astId": 2828,
        "contract": "contracts/GQGalacticAllianceLimited.sol:GQGalacticAllianceLimited",
        "label": "lockUpDuration",
        "offset": 0,
        "slot": "155",
        "type": "t_uint256"
      },
      {
        "astId": 2830,
        "contract": "contracts/GQGalacticAllianceLimited.sol:GQGalacticAllianceLimited",
        "label": "maxStakeAmount",
        "offset": 0,
        "slot": "156",
        "type": "t_uint256"
      },
      {
        "astId": 2832,
        "contract": "contracts/GQGalacticAllianceLimited.sol:GQGalacticAllianceLimited",
        "label": "withdrawFee",
        "offset": 0,
        "slot": "157",
        "type": "t_uint256"
      },
      {
        "astId": 2834,
        "contract": "contracts/GQGalacticAllianceLimited.sol:GQGalacticAllianceLimited",
        "label": "feeAddress",
        "offset": 0,
        "slot": "158",
        "type": "t_address"
      },
      {
        "astId": 2837,
        "contract": "contracts/GQGalacticAllianceLimited.sol:GQGalacticAllianceLimited",
        "label": "stakedToken",
        "offset": 0,
        "slot": "159",
        "type": "t_contract(IERC20Upgradeable)334"
      },
      {
        "astId": 2841,
        "contract": "contracts/GQGalacticAllianceLimited.sol:GQGalacticAllianceLimited",
        "label": "mapOfAccTokenPerShare",
        "offset": 0,
        "slot": "160",
        "type": "t_mapping(t_uint8,t_uint256)"
      },
      {
        "astId": 2845,
        "contract": "contracts/GQGalacticAllianceLimited.sol:GQGalacticAllianceLimited",
        "label": "mapOfRewardPerBlock",
        "offset": 0,
        "slot": "161",
        "type": "t_mapping(t_uint8,t_uint256)"
      },
      {
        "astId": 2849,
        "contract": "contracts/GQGalacticAllianceLimited.sol:GQGalacticAllianceLimited",
        "label": "mapOfPrecisionFactor",
        "offset": 0,
        "slot": "162",
        "type": "t_mapping(t_uint8,t_uint256)"
      },
      {
        "astId": 2853,
        "contract": "contracts/GQGalacticAllianceLimited.sol:GQGalacticAllianceLimited",
        "label": "mapOfRewardTokenDecimals",
        "offset": 0,
        "slot": "163",
        "type": "t_mapping(t_uint8,t_uint8)"
      },
      {
        "astId": 2857,
        "contract": "contracts/GQGalacticAllianceLimited.sol:GQGalacticAllianceLimited",
        "label": "mapOfRewardTokens",
        "offset": 0,
        "slot": "164",
        "type": "t_mapping(t_uint8,t_address)"
      },
      {
        "astId": 2862,
        "contract": "contracts/GQGalacticAllianceLimited.sol:GQGalacticAllianceLimited",
        "label": "userInfo",
        "offset": 0,
        "slot": "165",
        "type": "t_mapping(t_address,t_struct(UserInfo)2871_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20Upgradeable)334": {
        "encoding": "inplace",
        "label": "contract IERC20Upgradeable",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(UserInfo)2871_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct GQGalacticAllianceLimited.UserInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(UserInfo)2871_storage"
      },
      "t_mapping(t_uint8,t_address)": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint8,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint8,t_uint8)": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => uint8)",
        "numberOfBytes": "32",
        "value": "t_uint8"
      },
      "t_struct(UserInfo)2871_storage": {
        "encoding": "inplace",
        "label": "struct GQGalacticAllianceLimited.UserInfo",
        "members": [
          {
            "astId": 2864,
            "contract": "contracts/GQGalacticAllianceLimited.sol:GQGalacticAllianceLimited",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2866,
            "contract": "contracts/GQGalacticAllianceLimited.sol:GQGalacticAllianceLimited",
            "label": "rewardDebt1",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 2868,
            "contract": "contracts/GQGalacticAllianceLimited.sol:GQGalacticAllianceLimited",
            "label": "rewardDebt2",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 2870,
            "contract": "contracts/GQGalacticAllianceLimited.sol:GQGalacticAllianceLimited",
            "label": "firstDeposit",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}
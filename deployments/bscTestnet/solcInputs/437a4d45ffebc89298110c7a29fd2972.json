{
  "language": "Solidity",
  "sources": {
    "contracts/GalacticFarming.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\nimport \"./interfaces/IResource.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\n\ncontract GalacticFarming is\n    Initializable,\n    OwnableUpgradeable,\n    ReentrancyGuardUpgradeable\n{\n    using SafeMathUpgradeable for uint256;\n    using SafeERC20Upgradeable for IResource;\n    using SafeERC20Upgradeable for IERC20Upgradeable;\n\n    // Info of each user.\n    struct UserInfo {\n        uint256 amount; // How many LP tokens the user has provided.\n        uint256 rewardDebt; // Reward debt. See explanation below.\n        //\n        // We do some fancy math here. Basically, any point in time, the amount of Resources\n        // entitled to a user but is pending to be distributed is:\n        //\n        //   pending reward = (user.amount * pool.accResourcePerShare) - user.rewardDebt\n        //\n        // Whenever a user deposits or withdraws LP tokens to a pool. Here's what happens:\n        //   1. The pool's `accResourcePerShare` (and `lastRewardBlock`) gets updated.\n        //   2. User receives the pending reward sent to his/her address.\n        //   3. User's `amount` gets updated.\n        //   4. User's `rewardDebt` gets updated.\n    }\n\n    struct PoolInfo {\n        IERC20Upgradeable lpToken; // Address of LP token contract.\n        uint256 allocPoint; // How many allocation points assigned to this pool. Resources to distribute per block.\n        uint256 lastRewardBlock; // Last block number that Resources distribution occurs.\n        uint256 accResourcePerShare; // Accumulated Resources per share, times 1e12. See below.\n    }\n\n    // Interface for resource token\n    IResource public resource;\n    // Reward per block in resource token\n    uint256 public resourcePerBlock;\n    // Bonus multiplier \n    uint256 BONUS_MULTIPLIER;\n\n    // Pool data\n    PoolInfo[] public poolInfo;\n\n    // User info by stake\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\n    // LP tokens added to the pool\n    mapping(address => bool) public addedPools;\n    // LP tokens position by address\n    mapping(address => uint256) public positionPoolsByLP;\n\n    // Number that determines the total allocation points\n    uint256 public totalAllocPoint;\n    // Block to set the reward start block\n    uint256 public startBlock;\n\n    /***************************\n     * Events\n     ***************************/\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\n    event EmergencyWithdraw(\n        address indexed user,\n        uint256 indexed pid,\n        uint256 amount\n    );\n\n    /// @notice Constructor of the contract\n    constructor() initializer {}\n\n    /// @notice Initialize function for the proxy contract\n    /// @param _resource Token to reward users\n    /// @param _resourcePerBlock Number of tokens to reward per block\n    /// @param _startBlock Block number to start reward\n    function initialize(IResource _resource, uint256 _resourcePerBlock, uint256 _startBlock)\n        public\n        initializer\n    {\n        __Ownable_init();\n        resource = _resource;\n        resourcePerBlock = _resourcePerBlock;\n        startBlock = _startBlock;\n        BONUS_MULTIPLIER = 1;\n    }\n\n    /// @notice Updates bonus multiplier\n    /// @param _newBonusMultiplier the new bonus multiplier\n    function updateBonusMultiplier(uint256 _newBonusMultiplier) external onlyOwner {\n        BONUS_MULTIPLIER = _newBonusMultiplier;\n    }\n\n    /// @notice Gets the length for the pool info array\n    /// @return poolInfo length\n    function poolLength() external view returns (uint256) {\n        return poolInfo.length;\n    }\n\n    /// @notice Add a new LP token to the pool.\n    /// @dev Duplicate LP tokens not allowed\n    /// @param _allocPoint allocation points assigned to this new pool\n    /// @param _lpToken the lp token added to the pool\n    function add(uint256 _allocPoint, IERC20Upgradeable _lpToken) external onlyOwner {\n        massUpdatePools();\n        require(!addedPools[address(_lpToken)], \"add: Duplicate pool\");\n        uint256 lastRewardBlock = block.number > startBlock ? block.number : startBlock;\n        totalAllocPoint = totalAllocPoint.add(_allocPoint);\n        poolInfo.push(PoolInfo({\n            lpToken: _lpToken,\n            allocPoint: _allocPoint,\n            lastRewardBlock: lastRewardBlock,\n            accResourcePerShare: 0\n        }));\n        addedPools[address(_lpToken)] = true;\n        positionPoolsByLP[address(_lpToken)] = poolInfo.length - 1;\n    }\n\n    /// @notice Update alloc points for the given pool\n    /// @param _pid The pool identifier\n    /// @param _allocPoint The new alloc point quantity\n    function set(uint256 _pid, uint256 _allocPoint) external onlyOwner {\n        massUpdatePools();\n        totalAllocPoint = totalAllocPoint.sub(poolInfo[_pid].allocPoint).add(_allocPoint);\n        poolInfo[_pid].allocPoint = _allocPoint;\n    }\n\n    /// @notice Return reward multiplier over the given _from to _to block\n    /// @param _from From block\n    /// @param _to To block\n    /// @return Multiplier value\n    function getMultiplier(uint256 _from, uint256 _to) public view returns (uint256) {\n        return _to.sub(_from).mul(BONUS_MULTIPLIER);\n    }\n\n    /// @notice Function to see pending tokens\n    /// @param _pid Identifier of the pool in which we consult the pending rewards\n    /// @param _user User that consult the rewards \n    function pendingResource(uint256 _pid, address _user) external view returns (uint256) {\n        PoolInfo storage pool = poolInfo[_pid];\n        UserInfo storage user = userInfo[_pid][_user];\n        uint256 accResourcePerShare = pool.accResourcePerShare;\n        uint256 lpSupply = pool.lpToken.balanceOf(address(this));\n        if (block.number > pool.lastRewardBlock && lpSupply != 0) {\n            uint256 multiplier = getMultiplier(pool.lastRewardBlock, block.number);\n            uint256 resourceReward = multiplier.mul(resourcePerBlock).mul(pool.allocPoint).div(totalAllocPoint);\n            accResourcePerShare = accResourcePerShare.add(resourceReward.mul(1e12).div(lpSupply));\n        }\n        return user.amount.mul(accResourcePerShare).div(1e12).sub(user.rewardDebt);\n    }\n\n    /// @notice Update reward variables for all pools\n    function massUpdatePools() public {\n        uint256 length = poolInfo.length;\n        for (uint256 pid = 0; pid < length; ++pid) {\n            updatePool(pid);\n        }\n    }\n\n    /// @notice Update reward variables\n    /// @param _pid The pool identifier to update\n    function updatePool(uint256 _pid) public {\n        PoolInfo storage pool = poolInfo[_pid];\n        if(block.number <= pool.lastRewardBlock) return;\n        uint256 lpSupply = pool.lpToken.balanceOf(address(this));\n        if(lpSupply == 0) {\n            pool.lastRewardBlock = block.number;\n            return;\n        }\n        uint256 multiplier = getMultiplier(pool.lastRewardBlock, block.number);\n        uint256 resourceReward = multiplier.mul(resourcePerBlock).mul(pool.allocPoint).div(totalAllocPoint);\n        resource.mint(address(this), resourceReward);\n        pool.accResourcePerShare = pool.accResourcePerShare.add(resourceReward.mul(1e12).div(lpSupply));\n        pool.lastRewardBlock = block.number;\n    }\n\n    /// @notice Deposit LP tokens to the contract to receive rewards\n    /// @param _pid The pool identifier where user deposit LP tokens\n    /// @param _amount The amount to deposit\n    function deposit(uint256 _pid, uint256 _amount) public nonReentrant {\n        require ( _pid < poolInfo.length , \"deposit: pool exists?\");\n        PoolInfo storage pool = poolInfo[_pid];\n        UserInfo storage user = userInfo[_pid][msg.sender];\n        updatePool(_pid);\n        if(user.amount > 0) {\n            uint256 pending = user.amount.mul(pool.accResourcePerShare).div(1e12).sub(user.rewardDebt);\n            if(pending > 0) {\n                safeResourceTransfer(msg.sender, pending);\n            }\n        }\n        if(_amount > 0) {\n            pool.lpToken.safeTransferFrom(address(msg.sender), address(this), _amount);\n            user.amount = user.amount.add(_amount);\n        }\n        user.rewardDebt = user.amount.mul(pool.accResourcePerShare).div(1e12);\n        emit Deposit(msg.sender, _pid, _amount);\n    }\n\n    /// @notice Withdraw LP tokens from the contract\n    /// @param _pid The pool identifier where user withdraw LP tokens\n    /// @param _amount The amount to withdraw\n    function withdraw(uint256 _pid, uint256 _amount) public nonReentrant {\n        require ( _pid < poolInfo.length , \"withdraw: pool exists?\");\n        PoolInfo storage pool = poolInfo[_pid];\n        UserInfo storage user = userInfo[_pid][msg.sender];\n        require(user.amount >= _amount, \"withdraw: not good amount\");\n\n        updatePool(_pid);\n        uint256 pending = user.amount.mul(pool.accResourcePerShare).div(1e12).sub(user.rewardDebt);\n        if(pending > 0) {\n            safeResourceTransfer(msg.sender, pending);\n        }\n        if(_amount > 0) {\n            user.amount = user.amount.sub(_amount);\n            pool.lpToken.safeTransfer(address(msg.sender), _amount);\n        }\n        user.rewardDebt = user.amount.mul(pool.accResourcePerShare).div(1e12);\n        emit Withdraw(msg.sender, _pid, _amount);\n    }\n\n    /// @notice Withdraw without caring about rewards. EMERGENCY ONLY.\n    /// @param _pid The pool identifier where user withdraws\n    function emergencyWithdraw(uint256 _pid) public nonReentrant {\n        PoolInfo storage pool = poolInfo[_pid];\n        UserInfo storage user = userInfo[_pid][msg.sender];\n        pool.lpToken.safeTransfer(address(msg.sender), user.amount);\n        emit EmergencyWithdraw(msg.sender, _pid, user.amount);\n        user.amount = 0;\n        user.rewardDebt = 0;\n    }\n\n    /// @notice Safe resource transfer function, just in case if rounding error causes pool to not have enough Resource tokens\n    /// @param _to address for token receiver\n    /// @param _amount Tokens that receiver will receive\n    function safeResourceTransfer(address _to, uint256 _amount) internal {\n        uint256 resourceBal = resource.balanceOf(address(this));\n        if (_amount > resourceBal) {\n            resource.safeTransfer(_to, resourceBal);\n        } else {\n            resource.safeTransfer(_to, _amount);\n        }\n    }\n\n}\n"
    },
    "contracts/interfaces/IResource.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.4;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\";\n\ninterface IResource is IERC20MetadataUpgradeable {\n\n    /**\n     * @dev Mint resource tokens\n     */\n    function mint(address to, uint256 amount) external;\n\n\n}"
    },
    "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20Upgradeable.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20Upgradeable {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMathUpgradeable {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20Upgradeable.sol\";\nimport \"../../../utils/AddressUpgradeable.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20Upgradeable {\n    using AddressUpgradeable for address;\n\n    function safeTransfer(\n        IERC20Upgradeable token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20Upgradeable token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() initializer {}\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     */\n    bool private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Modifier to protect an initializer function from being invoked twice.\n     */\n    modifier initializer() {\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\n        // contract may have been reentered.\n        require(_initializing ? _isConstructor() : !_initialized, \"Initializable: contract is already initialized\");\n\n        bool isTopLevelCall = !_initializing;\n        if (isTopLevelCall) {\n            _initializing = true;\n            _initialized = true;\n        }\n\n        _;\n\n        if (isTopLevelCall) {\n            _initializing = false;\n        }\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} modifier, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    function _isConstructor() private view returns (bool) {\n        return !AddressUpgradeable.isContract(address(this));\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuardUpgradeable is Initializable {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    function __ReentrancyGuard_init() internal onlyInitializing {\n        __ReentrancyGuard_init_unchained();\n    }\n\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "contracts/GQGalacticAllianceLimited.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.4;\n\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\n\ncontract GQGalacticAllianceLimited is\n    Initializable,\n    OwnableUpgradeable,\n    ReentrancyGuardUpgradeable\n{\n    using SafeMathUpgradeable for uint256;\n    using SafeERC20Upgradeable for IERC20Upgradeable;\n\n    uint8 constant TOKEN1 = 1;\n    uint8 constant TOKEN2 = 2;\n\n    // Is contract initialized\n    bool public isInitialized;\n\n    // The block number when REWARD distribution ends.\n    uint256 public endBlock;\n\n    // The block number when REWARD distribution starts.\n    uint256 public startBlock;\n\n    // The block number of the last pool update\n    uint256 public lastUpdateBlock;\n\n    // Lockup duration for deposit\n    uint256 public lockUpDuration;\n\n    // The limit amount for staking\n    uint256 public maxStakeAmount;\n\n    // Withdraw fee in BP\n    uint256 public withdrawFee;\n\n    // Withdraw fee destiny address\n    address public feeAddress;\n\n    // The staked token\n    IERC20Upgradeable public stakedToken;\n\n    // Accrued token per share\n    mapping(uint8 => uint256) public mapOfAccTokenPerShare;\n\n    // REWARD tokens created per block.\n    mapping(uint8 => uint256) public mapOfRewardPerBlock;\n\n    // The precision factor for reward tokens\n    mapping(uint8 => uint256) public mapOfPrecisionFactor;\n\n    // decimals places of the reward token\n    mapping(uint8 => uint8) public mapOfRewardTokenDecimals;\n\n    // The reward token\n    mapping(uint8 => address) public mapOfRewardTokens;\n\n    // Info of each user that stakes tokens (stakedToken)\n    mapping(address => UserInfo) public userInfo;\n\n    struct UserInfo {\n        uint256 amount; // Staked tokens the user has provided\n        uint256 rewardDebt1; // Reward debt1\n        uint256 rewardDebt2; // Reward debt2\n        uint256 firstDeposit; // First deposit before withdraw\n    }\n\n    event AdminTokenRecovery(address tokenRecovered, uint256 amount);\n    event Deposit(address indexed user, uint256 amount);\n    event Claim(address indexed user, uint256 amount);\n    event EmergencyWithdraw(address indexed user, uint256 amount);\n    event NewStartAndEndBlocks(uint256 startBlock, uint256 endBlock);\n    event NewEndBlock(uint256 endBlock);\n    event NewRewardPerBlock(uint256 rewardPerBlock);\n    event RewardsStop(uint256 blockNumber);\n    event Withdraw(address indexed user, uint256 amount);\n    event NewLockUpDuration(uint256 lockUpDuration);\n\n    constructor() initializer {}\n\n    /*\n     * @notice Constructor of the contract\n     * @param _stakedToken: staked token address\n     * @param _rewardToken1: reward token1 address\n     * @param _rewardToken2: reward token2 address\n     * @param _rewardPerBlock: reward per block (in rewardToken)\n     * @param _startBlock: start block\n     * @param _endBlock: end block\n     * @param _lockUpDuration: duration for the deposit\n     * @param _withdrawFee: fee for early withdraw\n     * @param _feeAddress: address where fees for early withdraw will be send\n     */\n    function initialize(\n        IERC20Upgradeable _stakedToken,\n        address _rewardToken1,\n        address _rewardToken2,\n        uint256 _startBlock,\n        uint256 _endBlock,\n        uint256 _lockUpDuration,\n        uint256 _withdrawFee,\n        address _feeAddress,\n        uint256 _maxStakeAmount\n    ) public initializer {\n        __Ownable_init();\n        stakedToken = _stakedToken;\n        mapOfRewardTokens[TOKEN1] = _rewardToken1;\n        mapOfRewardTokens[TOKEN2] = _rewardToken2;\n        startBlock = _startBlock;\n        endBlock = _endBlock;\n        lockUpDuration = _lockUpDuration;\n        withdrawFee = _withdrawFee;\n        feeAddress = _feeAddress;\n        maxStakeAmount = _maxStakeAmount;\n\n        mapOfRewardTokenDecimals[TOKEN1] = IERC20MetadataUpgradeable(\n            mapOfRewardTokens[TOKEN1]\n        ).decimals();\n        mapOfRewardTokenDecimals[TOKEN2] = IERC20MetadataUpgradeable(\n            mapOfRewardTokens[TOKEN2]\n        ).decimals();\n        require(\n            mapOfRewardTokenDecimals[TOKEN1] < 30 &&\n                mapOfRewardTokenDecimals[TOKEN2] < 30,\n            \"Must be inferior to 30\"\n        );\n\n        mapOfPrecisionFactor[TOKEN1] = uint256(\n            10**(uint256(30).sub(uint256(mapOfRewardTokenDecimals[TOKEN1])))\n        );\n        mapOfPrecisionFactor[TOKEN2] = uint256(\n            10**(uint256(30).sub(uint256(mapOfRewardTokenDecimals[TOKEN2])))\n        );\n\n        // Set the lastRewardBlock as the startBlock\n        lastUpdateBlock = startBlock;\n\n        isInitialized = true;\n    }\n\n    /*\n     * @notice Deposit staked tokens and collect reward tokens (if any)\n     * @param _amount: amount to deposit (in stakedToken)\n     */\n    function deposit(uint256 _amount) external nonReentrant {\n        UserInfo storage user = userInfo[msg.sender];\n        require(\n            user.amount + _amount <= maxStakeAmount,\n            \"deposit: limit reached\"\n        );\n        _updatePool();\n\n        if (user.amount > 0) {\n            uint256 pendingToken1 = user\n                .amount\n                .mul(mapOfAccTokenPerShare[TOKEN1])\n                .div(mapOfPrecisionFactor[TOKEN1])\n                .sub(user.rewardDebt1);\n            if (pendingToken1 > 0) {\n                _safeTokenTransfer(\n                    mapOfRewardTokens[TOKEN1],\n                    msg.sender,\n                    pendingToken1\n                );\n            }\n            uint256 pendingToken2 = user\n                .amount\n                .mul(mapOfAccTokenPerShare[TOKEN2])\n                .div(mapOfPrecisionFactor[TOKEN2])\n                .sub(user.rewardDebt2);\n\n            if (pendingToken2 > 0) {\n                _safeTokenTransfer(\n                    mapOfRewardTokens[TOKEN2],\n                    msg.sender,\n                    pendingToken2\n                );\n            }\n        }\n\n        if (_amount > 0) {\n            user.amount = user.amount.add(_amount);\n            stakedToken.safeTransferFrom(\n                address(msg.sender),\n                address(this),\n                _amount\n            );\n            user.firstDeposit = user.firstDeposit == 0\n                ? block.timestamp\n                : user.firstDeposit;\n        }\n\n        user.rewardDebt1 = user.amount.mul(mapOfAccTokenPerShare[TOKEN1]).div(\n            mapOfPrecisionFactor[TOKEN1]\n        );\n\n        user.rewardDebt2 = user.amount.mul(mapOfAccTokenPerShare[TOKEN2]).div(\n            mapOfPrecisionFactor[TOKEN2]\n        );\n\n        emit Deposit(msg.sender, _amount);\n    }\n\n    /*\n     * @notice Withdraw staked tokens and collect reward tokens\n     * @param _amount: amount to withdraw (in rewardToken)\n     */\n    function withdraw(uint256 _amount) external nonReentrant {\n        require(_amount > 0, \"Error: Invalid amount\");\n        UserInfo storage user = userInfo[msg.sender];\n        require(user.amount >= _amount, \"Amount to withdraw too high\");\n        _updatePool();\n\n        uint256 pendingToken1 = user\n            .amount\n            .mul(mapOfAccTokenPerShare[TOKEN1])\n            .div(mapOfPrecisionFactor[TOKEN1])\n            .sub(user.rewardDebt1);\n        uint256 pendingToken2 = user\n            .amount\n            .mul(mapOfAccTokenPerShare[TOKEN2])\n            .div(mapOfPrecisionFactor[TOKEN2])\n            .sub(user.rewardDebt2);\n\n        user.amount = user.amount.sub(_amount);\n        uint256 _amountToSend = _amount;\n        if (block.timestamp < (user.firstDeposit + lockUpDuration)) {\n            uint256 _feeAmountToSend = _amountToSend.mul(withdrawFee).div(\n                10000\n            );\n            stakedToken.safeTransfer(address(feeAddress), _feeAmountToSend);\n            _amountToSend = _amountToSend - _feeAmountToSend;\n        }\n        stakedToken.safeTransfer(address(msg.sender), _amountToSend);\n        user.firstDeposit = user.firstDeposit == 0\n            ? block.timestamp\n            : user.firstDeposit;\n\n        if (pendingToken1 > 0) {\n            _safeTokenTransfer(\n                mapOfRewardTokens[TOKEN1],\n                msg.sender,\n                pendingToken1\n            );\n        }\n        if (pendingToken2 > 0) {\n            _safeTokenTransfer(\n                mapOfRewardTokens[TOKEN2],\n                msg.sender,\n                pendingToken2\n            );\n        }\n\n        user.rewardDebt1 = user.amount.mul(mapOfAccTokenPerShare[TOKEN1]).div(\n            mapOfPrecisionFactor[TOKEN1]\n        );\n        user.rewardDebt2 = user.amount.mul(mapOfAccTokenPerShare[TOKEN2]).div(\n            mapOfPrecisionFactor[TOKEN2]\n        );\n\n        emit Withdraw(msg.sender, _amount);\n    }\n\n    /*\n     * @notice Claim reward tokens\n     */\n    function claim() external nonReentrant {\n        UserInfo storage user = userInfo[msg.sender];\n\n        _updatePool();\n\n        if (user.amount > 0) {\n            uint256 pendingToken1 = user\n                .amount\n                .mul(mapOfAccTokenPerShare[TOKEN1])\n                .div(mapOfPrecisionFactor[TOKEN1])\n                .sub(user.rewardDebt1);\n\n            if (pendingToken1 > 0) {\n                _safeTokenTransfer(\n                    mapOfRewardTokens[TOKEN1],\n                    msg.sender,\n                    pendingToken1\n                );\n                emit Claim(msg.sender, pendingToken1);\n            }\n            uint256 pendingToken2 = user\n                .amount\n                .mul(mapOfAccTokenPerShare[TOKEN2])\n                .div(mapOfPrecisionFactor[TOKEN2])\n                .sub(user.rewardDebt2);\n\n            if (pendingToken2 > 0) {\n                _safeTokenTransfer(\n                    mapOfRewardTokens[TOKEN2],\n                    msg.sender,\n                    pendingToken2\n                );\n                emit Claim(msg.sender, pendingToken2);\n            }\n        }\n\n        user.rewardDebt1 = user.amount.mul(mapOfAccTokenPerShare[TOKEN1]).div(\n            mapOfPrecisionFactor[TOKEN1]\n        );\n\n        user.rewardDebt2 = user.amount.mul(mapOfAccTokenPerShare[TOKEN2]).div(\n            mapOfPrecisionFactor[TOKEN2]\n        );\n    }\n\n    /*\n     * @notice Withdraw staked tokens without caring about rewards\n     * @dev Needs to be for emergency.\n     */\n    function emergencyWithdraw() external nonReentrant {\n        UserInfo storage user = userInfo[msg.sender];\n        uint256 _amountToTransfer = user.amount;\n        user.amount = 0;\n        user.rewardDebt1 = 0;\n        user.rewardDebt2 = 0;\n\n        // Avoid users send an amount with 0 tokens\n        if (_amountToTransfer > 0) {\n            if (block.timestamp < (user.firstDeposit + lockUpDuration)) {\n                uint256 _feeAmountToSend = _amountToTransfer\n                    .mul(withdrawFee)\n                    .div(10000);\n                stakedToken.safeTransfer(address(feeAddress), _feeAmountToSend);\n                _amountToTransfer = _amountToTransfer - _feeAmountToSend;\n            }\n            stakedToken.safeTransfer(address(msg.sender), _amountToTransfer);\n        }\n\n        emit EmergencyWithdraw(msg.sender, _amountToTransfer);\n    }\n\n    /**\n     * @notice It allows the admin to recover wrong tokens sent to the contract\n     * @param _tokenAddress: the address of the token to withdraw\n     * @param _tokenAmount: the number of tokens to withdraw\n     * @dev This function is only callable by admin.\n     */\n    function recoverWrongTokens(address _tokenAddress, uint256 _tokenAmount)\n        external\n        onlyOwner\n    {\n        require(\n            _tokenAddress != address(stakedToken),\n            \"Cannot be staked token\"\n        );\n        require(\n            _tokenAddress != mapOfRewardTokens[TOKEN1] &&\n                _tokenAddress != mapOfRewardTokens[TOKEN2],\n            \"Cannot be reward token\"\n        );\n\n        IERC20Upgradeable(_tokenAddress).safeTransfer(\n            address(msg.sender),\n            _tokenAmount\n        );\n\n        emit AdminTokenRecovery(_tokenAddress, _tokenAmount);\n    }\n\n    /*\n     * @notice Stop rewards\n     * @dev Only callable by owner\n     */\n    function stopReward() external onlyOwner {\n        endBlock = block.number;\n    }\n\n    /*\n     * @notice Update reward per block\n     * @dev Only callable by owner.\n     * @param _rewardPerBlock: the reward per block\n     */\n    function updateRewardPerBlock(uint8 _rewardTokenId, uint256 _rewardPerBlock)\n        external\n        onlyOwner\n    {\n        require(block.number < startBlock, \"Pool has started\");\n        mapOfRewardPerBlock[_rewardTokenId] = _rewardPerBlock;\n        emit NewRewardPerBlock(_rewardPerBlock);\n    }\n\n    /**\n     * @notice It allows the admin to update start and end blocks\n     * @dev This function is only callable by owner.\n     * @param _startBlock: the new start block\n     * @param _bonusEndBlock: the new end block\n     */\n    function updateStartAndEndBlocks(\n        uint256 _startBlock,\n        uint256 _bonusEndBlock\n    ) external onlyOwner {\n        require(block.number < startBlock, \"Pool has started\");\n        require(\n            _startBlock < _bonusEndBlock,\n            \"New startBlock must be lower than new endBlock\"\n        );\n        require(\n            block.number < _startBlock,\n            \"New startBlock must be higher than current block\"\n        );\n\n        startBlock = _startBlock;\n        endBlock = _bonusEndBlock;\n\n        // Set the lastRewardBlock as the startBlock\n        lastUpdateBlock = startBlock;\n\n        emit NewStartAndEndBlocks(_startBlock, _bonusEndBlock);\n    }\n\n    /*\n     * @notice Sets the lock up duration\n     * @param _lockUpDuration: The lock up duration in seconds (block timestamp)\n     * @dev This function is only callable by owner.\n     */\n    function setLockUpDuration(uint256 _lockUpDuration) external onlyOwner {\n        lockUpDuration = _lockUpDuration;\n        emit NewLockUpDuration(lockUpDuration);\n    }\n\n    /*\n     * @notice Sets start block of the pool given a block amount\n     * @param _blocks: block amount\n     * @dev This function is only callable by owner.\n     */\n    function poolStartIn(uint256 _blocks) external onlyOwner {\n        poolSetStart(block.number.add(_blocks));\n    }\n\n    /*\n     * @notice Set the duration and start block of the pool\n     * @param _startBlock: start block\n     * @param _durationBlocks: duration block amount\n     * @dev This function is only callable by owner.\n     */\n    function poolSetStartAndDuration(\n        uint256 _startBlock,\n        uint256 _durationBlocks\n    ) external onlyOwner {\n        poolSetStart(_startBlock);\n        poolSetDuration(_durationBlocks);\n    }\n\n    /*\n     * @notice Withdraws the remaining funds\n     * @param _to The address where the funds will be sent\n     */\n    function withdrawRemains(uint8 _rewardTokenId, address _to)\n        external\n        onlyOwner\n    {\n        require(block.number > endBlock, \"Error: Pool not finished yet\");\n        uint256 tokenBal = IERC20Upgradeable(mapOfRewardTokens[_rewardTokenId])\n            .balanceOf(address(this));\n        require(tokenBal > 0, \"Error: No remaining funds\");\n        IERC20Upgradeable(mapOfRewardTokens[_rewardTokenId]).safeTransfer(\n            _to,\n            tokenBal\n        );\n    }\n\n    /*\n     * @notice Deposits the reward token1 funds\n     * @param _to The address where the funds will be sent\n     */\n    function depositRewardTokenFunds(uint8 _rewardTokenId, uint256 _amount)\n        external\n        onlyOwner\n    {\n        IERC20Upgradeable(mapOfRewardTokens[_rewardTokenId]).safeTransfer(\n            address(this),\n            _amount\n        );\n    }\n\n    /*\n     * @notice Gets the reward per block for UI\n     * @return reward per block\n     */\n    function rewarPerBlockUI(uint8 _rewardTokenId)\n        external\n        view\n        returns (uint256)\n    {\n        return\n            mapOfRewardPerBlock[_rewardTokenId].div(\n                10**uint256(mapOfRewardTokenDecimals[_rewardTokenId])\n            );\n    }\n\n    /*\n     * @notice View function to see pending reward on frontend.\n     * @param _user: user address\n     * @return Pending reward for a given user\n     */\n    function pendingReward(uint8 _rewardTokenId, address _user)\n        external\n        view\n        returns (uint256)\n    {\n        UserInfo storage user = userInfo[_user];\n        uint256 rewardDebt = _rewardTokenId == TOKEN1\n            ? user.rewardDebt1\n            : user.rewardDebt2;\n        uint256 stakedTokenSupply = stakedToken.balanceOf(address(this));\n        if (block.number > lastUpdateBlock && stakedTokenSupply != 0) {\n            uint256 multiplier = _getMultiplier(lastUpdateBlock, block.number);\n            uint256 tokenReward = multiplier.mul(\n                mapOfRewardPerBlock[_rewardTokenId]\n            );\n            uint256 adjustedPerShare = mapOfAccTokenPerShare[_rewardTokenId]\n                .add(\n                    tokenReward.mul(mapOfPrecisionFactor[_rewardTokenId]).div(\n                        stakedTokenSupply\n                    )\n                );\n            return\n                user\n                    .amount\n                    .mul(adjustedPerShare)\n                    .div(mapOfPrecisionFactor[_rewardTokenId])\n                    .sub(rewardDebt);\n        } else {\n            return\n                user\n                    .amount\n                    .mul(mapOfAccTokenPerShare[_rewardTokenId])\n                    .div(mapOfPrecisionFactor[_rewardTokenId])\n                    .sub(rewardDebt);\n        }\n    }\n\n    /*\n     * @notice Sets start block of the pool\n     * @param _startBlock: start block\n     * @dev This function is only callable by owner.\n     */\n    function poolSetStart(uint256 _startBlock) public onlyOwner {\n        require(block.number < startBlock, \"Pool has started\");\n        uint256 rewardDurationValue = rewardDuration();\n        startBlock = _startBlock;\n        endBlock = startBlock.add(rewardDurationValue);\n        lastUpdateBlock = startBlock;\n        emit NewStartAndEndBlocks(startBlock, endBlock);\n    }\n\n    /*\n     * @notice Set the duration of the pool\n     * @param _durationBlocks: duration block amount\n     * @dev This function is only callable by owner.\n     */\n    function poolSetDuration(uint256 _durationBlocks) public onlyOwner {\n        require(block.number < startBlock, \"Pool has started\");\n        endBlock = startBlock.add(_durationBlocks);\n        poolCalcRewardPerBlock(TOKEN1);\n        poolCalcRewardPerBlock(TOKEN2);\n        emit NewEndBlock(endBlock);\n    }\n\n    /*\n     * @notice Calculates the rewardPerBlock of the pool\n     * @dev This function is only callable by owner.\n     */\n    function poolCalcRewardPerBlock(uint8 _rewardTokenId) public onlyOwner {\n        uint256 rewardBal = IERC20Upgradeable(mapOfRewardTokens[_rewardTokenId])\n            .balanceOf(address(this));\n        mapOfRewardPerBlock[_rewardTokenId] = rewardBal.div(rewardDuration());\n    }\n\n    /*\n     * @notice Gets the reward duration\n     * @return reward duration\n     */\n    function rewardDuration() public view returns (uint256) {\n        return endBlock.sub(startBlock);\n    }\n\n    /*\n     * @notice SendPending tokens to claimer\n     * @param pending: amount to claim\n     */\n    function _safeTokenTransfer(\n        address _rewardToken,\n        address _to,\n        uint256 _amount\n    ) internal {\n        uint256 rewardTokenBalance = IERC20Upgradeable(_rewardToken).balanceOf(\n            address(this)\n        );\n        if (_amount > rewardTokenBalance) {\n            IERC20Upgradeable(_rewardToken).safeTransfer(\n                _to,\n                rewardTokenBalance\n            );\n        } else {\n            IERC20Upgradeable(_rewardToken).safeTransfer(_to, _amount);\n        }\n    }\n\n    /*\n     * @notice Update reward variables of the given pool to be up-to-date.\n     */\n    function _updatePool() internal {\n        if (block.number <= lastUpdateBlock) {\n            return;\n        }\n\n        uint256 stakedTokenSupply = stakedToken.balanceOf(address(this));\n\n        if (stakedTokenSupply == 0) {\n            lastUpdateBlock = block.number;\n            return;\n        }\n\n        uint256 multiplier = _getMultiplier(lastUpdateBlock, block.number);\n        uint256 tokenReward1 = multiplier.mul(mapOfRewardPerBlock[TOKEN1]);\n        uint256 tokenReward2 = multiplier.mul(mapOfRewardPerBlock[TOKEN2]);\n        mapOfAccTokenPerShare[TOKEN1] = mapOfAccTokenPerShare[TOKEN1].add(\n            tokenReward1.mul(mapOfPrecisionFactor[TOKEN1]).div(\n                stakedTokenSupply\n            )\n        );\n        mapOfAccTokenPerShare[TOKEN2] = mapOfAccTokenPerShare[TOKEN2].add(\n            tokenReward2.mul(mapOfPrecisionFactor[TOKEN2]).div(\n                stakedTokenSupply\n            )\n        );\n        lastUpdateBlock = block.number;\n    }\n\n    /*\n     * @notice Return reward multiplier over the given _from to _to block.\n     * @param _from: block to start\n     * @param _to: block to finish\n     * @return multiplier\n     */\n    function _getMultiplier(uint256 _from, uint256 _to)\n        internal\n        view\n        returns (uint256)\n    {\n        if (_to <= endBlock) {\n            return _to.sub(_from);\n        } else if (_from >= endBlock) {\n            return 0;\n        } else {\n            return endBlock.sub(_from);\n        }\n    }\n}\n"
    },
    "contracts/GQGalacticAlliance.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.4;\n\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\n\ncontract GQGalacticAlliance is\n    Initializable,\n    OwnableUpgradeable,\n    ReentrancyGuardUpgradeable\n{\n    using SafeMathUpgradeable for uint256;\n    using SafeERC20Upgradeable for IERC20Upgradeable;\n\n    uint8 constant TOKEN1 = 1;\n    uint8 constant TOKEN2 = 2;\n\n    // Is contract initialized\n    bool public isInitialized;\n\n    // The block number when REWARD distribution ends.\n    uint256 public endBlock;\n\n    // The block number when REWARD distribution starts.\n    uint256 public startBlock;\n\n    // The block number of the last pool update\n    uint256 public lastUpdateBlock;\n\n    // Lockup duration for deposit\n    uint256 public lockUpDuration;\n\n    // Withdraw fee in BP\n    uint256 public withdrawFee;\n\n    // Withdraw fee destiny address\n    address public feeAddress;\n\n    // The staked token\n    IERC20Upgradeable public stakedToken;\n\n    // Accrued token per share\n    mapping(uint8 => uint256) public mapOfAccTokenPerShare;\n\n    // REWARD tokens created per block.\n    mapping(uint8 => uint256) public mapOfRewardPerBlock;\n\n    // The precision factor for reward tokens\n    mapping(uint8 => uint256) public mapOfPrecisionFactor;\n\n    // decimals places of the reward token\n    mapping(uint8 => uint8) public mapOfRewardTokenDecimals;\n\n    // The reward token\n    mapping(uint8 => address) public mapOfRewardTokens;\n\n    // Info of each user that stakes tokens (stakedToken)\n    mapping(address => UserInfo) public userInfo;\n\n    struct UserInfo {\n        uint256 amount; // Staked tokens the user has provided\n        uint256 rewardDebt1; // Reward debt1\n        uint256 rewardDebt2; // Reward debt2\n        uint256 firstDeposit; // First deposit before withdraw\n    }\n\n    event AdminTokenRecovery(address tokenRecovered, uint256 amount);\n    event Deposit(address indexed user, uint256 amount);\n    event Claim(address indexed user, uint256 amount);\n    event EmergencyWithdraw(address indexed user, uint256 amount);\n    event NewStartAndEndBlocks(uint256 startBlock, uint256 endBlock);\n    event NewEndBlock(uint256 endBlock);\n    event NewRewardPerBlock(uint256 rewardPerBlock);\n    event RewardsStop(uint256 blockNumber);\n    event Withdraw(address indexed user, uint256 amount);\n    event NewLockUpDuration(uint256 lockUpDuration);\n\n    constructor() initializer {}\n\n    /*\n     * @notice Constructor of the contract\n     * @param _stakedToken: staked token address\n     * @param _rewardToken1: reward token1 address\n     * @param _rewardToken2: reward token2 address\n     * @param _rewardPerBlock: reward per block (in rewardToken)\n     * @param _startBlock: start block\n     * @param _endBlock: end block\n     * @param _lockUpDuration: duration for the deposit\n     * @param _withdrawFee: fee for early withdraw\n     * @param _feeAddress: address where fees for early withdraw will be send\n     */\n    function initialize(\n        IERC20Upgradeable _stakedToken,\n        address _rewardToken1,\n        address _rewardToken2,\n        uint256 _startBlock,\n        uint256 _endBlock,\n        uint256 _lockUpDuration,\n        uint256 _withdrawFee,\n        address _feeAddress\n    ) public initializer {\n        __Ownable_init();\n        stakedToken = _stakedToken;\n        mapOfRewardTokens[TOKEN1] = _rewardToken1;\n        mapOfRewardTokens[TOKEN2] = _rewardToken2;\n        startBlock = _startBlock;\n        endBlock = _endBlock;\n        lockUpDuration = _lockUpDuration;\n        withdrawFee = _withdrawFee;\n        feeAddress = _feeAddress;\n\n        mapOfRewardTokenDecimals[TOKEN1] = IERC20MetadataUpgradeable(\n            mapOfRewardTokens[TOKEN1]\n        ).decimals();\n        mapOfRewardTokenDecimals[TOKEN2] = IERC20MetadataUpgradeable(\n            mapOfRewardTokens[TOKEN2]\n        ).decimals();\n        require(\n            mapOfRewardTokenDecimals[TOKEN1] < 30 &&\n                mapOfRewardTokenDecimals[TOKEN2] < 30,\n            \"Must be inferior to 30\"\n        );\n\n        mapOfPrecisionFactor[TOKEN1] = uint256(\n            10**(uint256(30).sub(uint256(mapOfRewardTokenDecimals[TOKEN1])))\n        );\n        mapOfPrecisionFactor[TOKEN2] = uint256(\n            10**(uint256(30).sub(uint256(mapOfRewardTokenDecimals[TOKEN2])))\n        );\n\n        // Set the lastRewardBlock as the startBlock\n        lastUpdateBlock = startBlock;\n\n        isInitialized = true;\n    }\n\n    /*\n     * @notice Deposit staked tokens and collect reward tokens (if any)\n     * @param _amount: amount to deposit (in stakedToken)\n     */\n    function deposit(uint256 _amount) external nonReentrant {\n        UserInfo storage user = userInfo[msg.sender];\n\n        _updatePool();\n\n        if (user.amount > 0) {\n            uint256 pendingToken1 = user\n                .amount\n                .mul(mapOfAccTokenPerShare[TOKEN1])\n                .div(mapOfPrecisionFactor[TOKEN1])\n                .sub(user.rewardDebt1);\n            if (pendingToken1 > 0) {\n                _safeTokenTransfer(\n                    mapOfRewardTokens[TOKEN1],\n                    msg.sender,\n                    pendingToken1\n                );\n            }\n            uint256 pendingToken2 = user\n                .amount\n                .mul(mapOfAccTokenPerShare[TOKEN2])\n                .div(mapOfPrecisionFactor[TOKEN2])\n                .sub(user.rewardDebt2);\n\n            if (pendingToken2 > 0) {\n                _safeTokenTransfer(\n                    mapOfRewardTokens[TOKEN2],\n                    msg.sender,\n                    pendingToken2\n                );\n            }\n        }\n\n        if (_amount > 0) {\n            user.amount = user.amount.add(_amount);\n            stakedToken.safeTransferFrom(\n                address(msg.sender),\n                address(this),\n                _amount\n            );\n            user.firstDeposit = user.firstDeposit == 0\n                ? block.timestamp\n                : user.firstDeposit;\n        }\n\n        user.rewardDebt1 = user\n            .amount\n            .mul(mapOfAccTokenPerShare[TOKEN1])\n            .div(mapOfPrecisionFactor[TOKEN1]);\n\n        user.rewardDebt2 = user\n            .amount\n            .mul(mapOfAccTokenPerShare[TOKEN2])\n            .div(mapOfPrecisionFactor[TOKEN2]);\n\n        emit Deposit(msg.sender, _amount);\n    }\n\n    /*\n     * @notice Withdraw staked tokens and collect reward tokens\n     * @param _amount: amount to withdraw (in rewardToken)\n     */\n    function withdraw(uint256 _amount) external nonReentrant {\n        require(_amount > 0, \"Error: Invalid amount\");\n        UserInfo storage user = userInfo[msg.sender];\n        require(user.amount >= _amount, \"Amount to withdraw too high\");\n        _updatePool();\n\n        uint256 pendingToken1 = user\n            .amount\n            .mul(mapOfAccTokenPerShare[TOKEN1])\n            .div(mapOfPrecisionFactor[TOKEN1])\n            .sub(user.rewardDebt1);\n        uint256 pendingToken2 = user\n            .amount\n            .mul(mapOfAccTokenPerShare[TOKEN2])\n            .div(mapOfPrecisionFactor[TOKEN2])\n            .sub(user.rewardDebt2);\n\n        user.amount = user.amount.sub(_amount);\n        uint256 _amountToSend = _amount;\n        if (block.timestamp < (user.firstDeposit + lockUpDuration)) {\n            uint256 _feeAmountToSend = _amountToSend.mul(withdrawFee).div(\n                10000\n            );\n            stakedToken.safeTransfer(address(feeAddress), _feeAmountToSend);\n            _amountToSend = _amountToSend - _feeAmountToSend;\n        }\n        stakedToken.safeTransfer(address(msg.sender), _amountToSend);\n        user.firstDeposit = user.firstDeposit == 0\n            ? block.timestamp\n            : user.firstDeposit;\n\n        if (pendingToken1 > 0) {\n            _safeTokenTransfer(\n                mapOfRewardTokens[TOKEN1],\n                msg.sender,\n                pendingToken1\n            );\n        }\n        if (pendingToken2 > 0) {\n            _safeTokenTransfer(\n                mapOfRewardTokens[TOKEN2],\n                msg.sender,\n                pendingToken2\n            );\n        }\n\n        user.rewardDebt1 = user\n            .amount\n            .mul(mapOfAccTokenPerShare[TOKEN1])\n            .div(mapOfPrecisionFactor[TOKEN1]);\n        user.rewardDebt2 = user\n            .amount\n            .mul(mapOfAccTokenPerShare[TOKEN2])\n            .div(mapOfPrecisionFactor[TOKEN2]);\n\n        emit Withdraw(msg.sender, _amount);\n    }\n\n    /*\n     * @notice Claim reward tokens\n     */\n    function claim() external nonReentrant {\n        UserInfo storage user = userInfo[msg.sender];\n\n        _updatePool();\n\n        if (user.amount > 0) {\n            uint256 pendingToken1 = user\n                .amount\n                .mul(mapOfAccTokenPerShare[TOKEN1])\n                .div(mapOfPrecisionFactor[TOKEN1])\n                .sub(user.rewardDebt1);\n\n            if (pendingToken1 > 0) {\n                _safeTokenTransfer(\n                    mapOfRewardTokens[TOKEN1],\n                    msg.sender,\n                    pendingToken1\n                );\n                emit Claim(msg.sender, pendingToken1);\n            }\n            uint256 pendingToken2 = user\n                .amount\n                .mul(mapOfAccTokenPerShare[TOKEN2])\n                .div(mapOfPrecisionFactor[TOKEN2])\n                .sub(user.rewardDebt2);\n\n            if (pendingToken2 > 0) {\n                _safeTokenTransfer(\n                    mapOfRewardTokens[TOKEN2],\n                    msg.sender,\n                    pendingToken2\n                );\n                emit Claim(msg.sender, pendingToken2);\n            }\n        }\n\n        user.rewardDebt1 = user\n            .amount\n            .mul(mapOfAccTokenPerShare[TOKEN1])\n            .div(mapOfPrecisionFactor[TOKEN1]);\n\n        user.rewardDebt2 = user\n            .amount\n            .mul(mapOfAccTokenPerShare[TOKEN2])\n            .div(mapOfPrecisionFactor[TOKEN2]);\n    }\n\n    /*\n     * @notice Withdraw staked tokens without caring about rewards\n     * @dev Needs to be for emergency.\n     */\n    function emergencyWithdraw() external nonReentrant {\n        UserInfo storage user = userInfo[msg.sender];\n        uint256 _amountToTransfer = user.amount;\n        user.amount = 0;\n        user.rewardDebt1 = 0;\n        user.rewardDebt2 = 0;\n\n        // Avoid users send an amount with 0 tokens\n        if (_amountToTransfer > 0) {\n            if (block.timestamp < (user.firstDeposit + lockUpDuration)) {\n                uint256 _feeAmountToSend = _amountToTransfer\n                    .mul(withdrawFee)\n                    .div(10000);\n                stakedToken.safeTransfer(address(feeAddress), _feeAmountToSend);\n                _amountToTransfer = _amountToTransfer - _feeAmountToSend;\n            }\n            stakedToken.safeTransfer(address(msg.sender), _amountToTransfer);\n        }\n\n        emit EmergencyWithdraw(msg.sender, _amountToTransfer);\n    }\n\n    /**\n     * @notice It allows the admin to recover wrong tokens sent to the contract\n     * @param _tokenAddress: the address of the token to withdraw\n     * @param _tokenAmount: the number of tokens to withdraw\n     * @dev This function is only callable by admin.\n     */\n    function recoverWrongTokens(address _tokenAddress, uint256 _tokenAmount)\n        external\n        onlyOwner\n    {\n        require(\n            _tokenAddress != address(stakedToken),\n            \"Cannot be staked token\"\n        );\n        require(\n            _tokenAddress != mapOfRewardTokens[TOKEN1] &&\n                _tokenAddress != mapOfRewardTokens[TOKEN2],\n            \"Cannot be reward token\"\n        );\n\n        IERC20Upgradeable(_tokenAddress).safeTransfer(\n            address(msg.sender),\n            _tokenAmount\n        );\n\n        emit AdminTokenRecovery(_tokenAddress, _tokenAmount);\n    }\n\n    /*\n     * @notice Stop rewards\n     * @dev Only callable by owner\n     */\n    function stopReward() external onlyOwner {\n        endBlock = block.number;\n    }\n\n    /*\n     * @notice Update reward per block\n     * @dev Only callable by owner.\n     * @param _rewardPerBlock: the reward per block\n     */\n    function updateRewardPerBlock(uint8 _rewardTokenId, uint256 _rewardPerBlock)\n        external\n        onlyOwner\n    {\n        require(block.number < startBlock, \"Pool has started\");\n        mapOfRewardPerBlock[_rewardTokenId] = _rewardPerBlock;\n        emit NewRewardPerBlock(_rewardPerBlock);\n    }\n\n    /**\n     * @notice It allows the admin to update start and end blocks\n     * @dev This function is only callable by owner.\n     * @param _startBlock: the new start block\n     * @param _bonusEndBlock: the new end block\n     */\n    function updateStartAndEndBlocks(\n        uint256 _startBlock,\n        uint256 _bonusEndBlock\n    ) external onlyOwner {\n        require(block.number < startBlock, \"Pool has started\");\n        require(\n            _startBlock < _bonusEndBlock,\n            \"New startBlock must be lower than new endBlock\"\n        );\n        require(\n            block.number < _startBlock,\n            \"New startBlock must be higher than current block\"\n        );\n\n        startBlock = _startBlock;\n        endBlock = _bonusEndBlock;\n\n        // Set the lastRewardBlock as the startBlock\n        lastUpdateBlock = startBlock;\n\n        emit NewStartAndEndBlocks(_startBlock, _bonusEndBlock);\n    }\n\n    /*\n     * @notice Sets the lock up duration\n     * @param _lockUpDuration: The lock up duration in seconds (block timestamp)\n     * @dev This function is only callable by owner.\n     */\n    function setLockUpDuration(uint256 _lockUpDuration) external onlyOwner {\n        lockUpDuration = _lockUpDuration;\n        emit NewLockUpDuration(lockUpDuration);\n    }\n\n    /*\n     * @notice Sets start block of the pool given a block amount\n     * @param _blocks: block amount\n     * @dev This function is only callable by owner.\n     */\n    function poolStartIn(uint256 _blocks) external onlyOwner {\n        poolSetStart(block.number.add(_blocks));\n    }\n\n    /*\n     * @notice Set the duration and start block of the pool\n     * @param _startBlock: start block\n     * @param _durationBlocks: duration block amount\n     * @dev This function is only callable by owner.\n     */\n    function poolSetStartAndDuration(\n        uint256 _startBlock,\n        uint256 _durationBlocks\n    ) external onlyOwner {\n        poolSetStart(_startBlock);\n        poolSetDuration(_durationBlocks);\n    }\n\n    /*\n     * @notice Withdraws the remaining funds\n     * @param _to The address where the funds will be sent\n     */\n    function withdrawRemains(uint8 _rewardTokenId, address _to)\n        external\n        onlyOwner\n    {\n        require(block.number > endBlock, \"Error: Pool not finished yet\");\n        uint256 tokenBal = IERC20Upgradeable(mapOfRewardTokens[_rewardTokenId])\n            .balanceOf(address(this));\n        require(tokenBal > 0, \"Error: No remaining funds\");\n        IERC20Upgradeable(mapOfRewardTokens[_rewardTokenId]).safeTransfer(\n            _to,\n            tokenBal\n        );\n    }\n\n    /*\n     * @notice Deposits the reward token1 funds\n     * @param _to The address where the funds will be sent\n     */\n    function depositRewardTokenFunds(uint8 _rewardTokenId, uint256 _amount)\n        external\n        onlyOwner\n    {\n        IERC20Upgradeable(mapOfRewardTokens[_rewardTokenId]).safeTransfer(\n            address(this),\n            _amount\n        );\n    }\n\n    /*\n     * @notice Gets the reward per block for UI\n     * @return reward per block\n     */\n    function rewarPerBlockUI(uint8 _rewardTokenId)\n        external\n        view\n        returns (uint256)\n    {\n        return\n            mapOfRewardPerBlock[_rewardTokenId].div(\n                10**uint256(mapOfRewardTokenDecimals[_rewardTokenId])\n            );\n    }\n\n    /*\n     * @notice View function to see pending reward on frontend.\n     * @param _user: user address\n     * @return Pending reward for a given user\n     */\n    function pendingReward(uint8 _rewardTokenId, address _user)\n        external\n        view\n        returns (uint256)\n    {\n        UserInfo storage user = userInfo[_user];\n        uint256 rewardDebt = _rewardTokenId == TOKEN1\n            ? user.rewardDebt1\n            : user.rewardDebt2;\n        uint256 stakedTokenSupply = stakedToken.balanceOf(address(this));\n        if (block.number > lastUpdateBlock && stakedTokenSupply != 0) {\n            uint256 multiplier = _getMultiplier(lastUpdateBlock, block.number);\n            uint256 tokenReward = multiplier.mul(\n                mapOfRewardPerBlock[_rewardTokenId]\n            );\n            uint256 adjustedPerShare = mapOfAccTokenPerShare[_rewardTokenId]\n                .add(\n                    tokenReward.mul(mapOfPrecisionFactor[_rewardTokenId]).div(\n                        stakedTokenSupply\n                    )\n                );\n            return\n                user\n                    .amount\n                    .mul(adjustedPerShare)\n                    .div(mapOfPrecisionFactor[_rewardTokenId])\n                    .sub(rewardDebt);\n        } else {\n            return\n                user\n                    .amount\n                    .mul(mapOfAccTokenPerShare[_rewardTokenId])\n                    .div(mapOfPrecisionFactor[_rewardTokenId])\n                    .sub(rewardDebt);\n        }\n    }\n\n    /*\n     * @notice Sets start block of the pool\n     * @param _startBlock: start block\n     * @dev This function is only callable by owner.\n     */\n    function poolSetStart(uint256 _startBlock) public onlyOwner {\n        require(block.number < startBlock, \"Pool has started\");\n        uint256 rewardDurationValue = rewardDuration();\n        startBlock = _startBlock;\n        endBlock = startBlock.add(rewardDurationValue);\n        lastUpdateBlock = startBlock;\n        emit NewStartAndEndBlocks(startBlock, endBlock);\n    }\n\n    /*\n     * @notice Set the duration of the pool\n     * @param _durationBlocks: duration block amount\n     * @dev This function is only callable by owner.\n     */\n    function poolSetDuration(uint256 _durationBlocks) public onlyOwner {\n        require(block.number < startBlock, \"Pool has started\");\n        endBlock = startBlock.add(_durationBlocks);\n        poolCalcRewardPerBlock(TOKEN1);\n        poolCalcRewardPerBlock(TOKEN2);\n        emit NewEndBlock(endBlock);\n    }\n\n    /*\n     * @notice Calculates the rewardPerBlock of the pool\n     * @dev This function is only callable by owner.\n     */\n    function poolCalcRewardPerBlock(uint8 _rewardTokenId) public onlyOwner {\n        uint256 rewardBal = IERC20Upgradeable(mapOfRewardTokens[_rewardTokenId]).balanceOf(address(this));\n        mapOfRewardPerBlock[_rewardTokenId] = rewardBal.div(rewardDuration());\n    }\n\n    /*\n     * @notice Gets the reward duration\n     * @return reward duration\n     */\n    function rewardDuration() public view returns (uint256) {\n        return endBlock.sub(startBlock);\n    }\n\n    /*\n     * @notice SendPending tokens to claimer\n     * @param pending: amount to claim\n     */\n    function _safeTokenTransfer(\n        address _rewardToken,\n        address _to,\n        uint256 _amount\n    ) internal {\n        uint256 rewardTokenBalance = IERC20Upgradeable(_rewardToken).balanceOf(address(this));\n        if (_amount > rewardTokenBalance) {\n            IERC20Upgradeable(_rewardToken).safeTransfer(_to, rewardTokenBalance);\n        } else {\n            IERC20Upgradeable(_rewardToken).safeTransfer(_to, _amount);\n        }\n    }\n\n    /*\n     * @notice Update reward variables of the given pool to be up-to-date.\n     */\n    function _updatePool() internal {\n        if (block.number <= lastUpdateBlock) {\n            return;\n        }\n\n        uint256 stakedTokenSupply = stakedToken.balanceOf(address(this));\n\n        if (stakedTokenSupply == 0) {\n            lastUpdateBlock = block.number;\n            return;\n        }\n\n        uint256 multiplier = _getMultiplier(lastUpdateBlock, block.number);\n        uint256 tokenReward1 = multiplier.mul(mapOfRewardPerBlock[TOKEN1]);\n        uint256 tokenReward2 = multiplier.mul(mapOfRewardPerBlock[TOKEN2]);\n        mapOfAccTokenPerShare[TOKEN1] = mapOfAccTokenPerShare[TOKEN1].add(\n            tokenReward1.mul(mapOfPrecisionFactor[TOKEN1]).div(stakedTokenSupply)\n        );\n        mapOfAccTokenPerShare[TOKEN2] = mapOfAccTokenPerShare[TOKEN2].add(\n            tokenReward2.mul(mapOfPrecisionFactor[TOKEN2]).div(stakedTokenSupply)\n        );\n        lastUpdateBlock = block.number;\n    }\n\n    /*\n     * @notice Return reward multiplier over the given _from to _to block.\n     * @param _from: block to start\n     * @param _to: block to finish\n     * @return multiplier\n     */\n    function _getMultiplier(uint256 _from, uint256 _to)\n        internal\n        view\n        returns (uint256)\n    {\n        if (_to <= endBlock) {\n            return _to.sub(_from);\n        } else if (_from >= endBlock) {\n            return 0;\n        } else {\n            return endBlock.sub(_from);\n        }\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}